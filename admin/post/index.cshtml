@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Node> field = new FieldExtractor<PP_Node>();
    private List<PP_Node> items = null;
    private List<PP_Category> cat = null;
    private List<VM_Blog> blog_cat = null;
}
@{
    CheckAuthen()();
    var urlQuery = Request.Url.Query;

    if (IsPost && urlQuery == "?delete")
    {
        new Func<Action>(() =>
        {
            try
            {
                AntiForgery.Validate();
                int itemId;
                if (!int.TryParse(Request.Form[field.GetName(t => t.Id)], out itemId))
                {
                    return AjaxResult.BadRequest();
                }

                var item = Db.GetOne<PP_Node>(itemId);
                if (item == null)
                {
                    return AjaxResult.NotFound();
                }

                if (item.NodeType != "post")
                {
                    return AjaxResult.BadRequest();
                }
                var vatt = Db.Table<PP_Category_details>().Where(x => x.Idproduct == itemId && x.NodeType == "post").ToArray();
                foreach (var check in vatt.EmptyIfNull())
                {
                    Db.Delete<PP_Category_details>(check.Id);
                }
                Db.Delete<PP_Node>(item.Id);
                Root.ClearCache();
                return AjaxResult.Ok(Text[$"Item [{item.Title}] has been deleted!", $"Mục [{item.Title}] đã được xóa!"]);

            }
            catch (Exception ex)
            {
                return AjaxResult.Fail(ex.Message);
            }
        })()();
    }


    int catId = Request.QueryString[field.GetName(t => t.CategoryId)].AsInt();
    var category = Db.GetOne<PP_Category>(catId);

    var news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Node>() on cat_blog.Idproduct equals node.Id
 select new VM_Blog
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Summary,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     idnode = cat_blog.Idproduct,
     Featured = node.Featured,
     listcat = node.listcat,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToList();

    if (catId > 0)
    {
        Page.Title = $"{category.Title} - {Text["LIST OF POSTS", "DANH SÁCH BÀI VIẾT"]}";
    }
    else
    {
        Page.Title = $"{Text["LIST OF POSTS", "DANH SÁCH BÀI VIẾT"]}";
        Page.Menu = "post";
    }

    var query = Db.Query<PP_Node>(t => t.LangId == LangIdCompose && t.NodeType == "post");




    if (catId > 0)
    {

        news = (
    from cat_blog in Db.Table<PP_Category_details>()
    join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
    join node in Db.Table<PP_Node>() on cat_blog.Idproduct equals node.Id
    where catnew.Id == catId
    select new VM_Blog
    {
        JsonContent = node.Content,
        Title = node.Title,
        Path = node.NodePath,
        Summary = node.Summary,
        ImageUrl = node.ImageUrl,
        CreatedTime = node.CreatedTime,
        CategoryId = catnew.Id,
        CategoryName = catnew.Title,
        CategoryPath = catnew.CategoryPath,
        catid = catnew.Id,
        idnode = cat_blog.Idproduct,
        Featured = node.Featured,
        listcat = node.listcat,
    }
)
.AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToList();


    }



    blog_cat = news.ToList();
    items = query.ToList();
    cat = Db.Table<PP_Category>().ToList();

    //Func<string, string> makeBreadcrumb = (string s) =>
    //        string.Join(" > ", Newtonsoft.Json.JsonConvert.DeserializeObject<List<KeyValuePair<string, string>>>(s).Select(b => b.Value));
    //var linkOptions = Db.GetLinks(LangIdCompose);

}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách bài viết" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/category?type=post" aria-expanded="false" class="nav-link">
                            <i class="fe-folder"></i> @Text["Categories", "Các chuyên mục"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/post" aria-expanded="true" class="nav-link @(catId > 0 ? "" : "active")">
                            <i class="fas fa-list-ol"></i> @Text["All of posts", "Tất cả bài viết"]
                        </a>
                    </li>
                    @if (catId > 0)
                    {
                        <li class="nav-item">
                            <a href="#list" data-toggle="tab" aria-expanded="true" class="nav-link active">
                                <i class="fas fa-list-ol"></i> @category.Title
                            </a>
                        </li>
                    }
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/post/create@(catId > 0?$"?CategoryId={catId}":string.Empty)" aria-expanded="false" class="nav-link">
                            <i class="fas fa-plus-circle"></i> @Text["Create new post", "Thêm bài viết mới"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="list">
                        <table id="datatable" class="table table-striped table-bordered dt-responsive" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                            <thead>
                                <tr>
                                    <th style="min-width: 230px; width: 40%;">@Text[field.GetTitle(t => t.Title)]</th>
                                    <th> Danh mục</th>
                                    <th style="width:1%;min-width:100px;">@Text[field.GetTitle(t => t.ModifiedTime)]</th>
                                    <th style="width:1%;min-width:80px;">@Text[field.GetTitle(t => t.Featured)]</th>
                                    <th style="width:1%;min-width:80px;">@Text[field.GetTitle(t => t.ImageUrl)]</th>
                                    <th style="width:1%;min-width:80px;">@Text["Control", "Thao tác"]</th>
                                </tr>
                            </thead>

                            <tbody>
                                @for (int i = 0; i < blog_cat.Count; i++)
                                {
                                    <tr>
                                        <td style="min-width: 230px; width: 20%;">
                                            <b>@(i + 1).</b> <a href="@Constants.Admin_Url/post/edit?id=@blog_cat[i].idnode">@blog_cat[i].Title</a>
                                        </td>
                                        <td>
                                            @foreach (var item in blog_cat[i].listcat.Split(',').Select((x, y) => new { x,y}))
                                            {
                                                int idcheck = item.x.AsInt();
                                                foreach (var item2 in cat.EmptyIfNull().Where(x => x.Id == idcheck).Select((x, y) => new { x, y }))
                                                {
                                                    var count = blog_cat[i].listcat.Split(',').Count();
                                                    <text>@item2.x.Title  @(item.y +1 == count ? "" : "/")   </text>
                                                }
                                            }
                                        </td>
                                        <td align="center">
                                            @($"{blog_cat[i].CreatedTime:dd/MM/yyyy}")
                                        </td>
                                        <td align="center">
                                            <input type="checkbox"
                                                   data-plugin="switchery"
                                                   data-color="#3ec396"
                                                   @(blog_cat[i].Featured ? "checked" : string.Empty)
                                                   disabled />
                                        </td>
                                        <td align="center">
                                            <a href="@Constants.Admin_Url/post/image?id=@blog_cat[i].idnode">
                                                <img src="@(blog_cat[i].ImageUrl??"")" border="0" title="Upload thêm ảnh" onerror="this.onerror=null;this.src='@Constants.Admin_Url/assets/images/not_available.png';" height="50">
                                            </a>
                                        </td>
                                        <td align="center">
                                            <div class="btn-group btn-group-sm">
                                                <a title="@Text["View", "Xem"]" target="_blank" href="/@blog_cat[i].Path" type="button" class="btn btn-warning">
                                                    <span class="fa fa-eye"></span>
                                                </a>
                                                <a title="@Text["Modify", "Hiệu chỉnh"]" href="@Constants.Admin_Url/post/edit?id=@blog_cat[i].idnode" type="button" class="btn btn-warning">
                                                    <span class="mdi mdi-pencil"></span>
                                                </a>
                                                <a title="@Text["Delete", "Xóa"]" href="javascript:delele(@blog_cat[i].idnode)" type="button" class="btn btn-danger">
                                                    <span class="mdi mdi-delete"></span>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section head{
    <!-- third party css -->
    <link href="@Constants.Admin_Url/assets/libs/datatables/dataTables.bootstrap4.css" rel="stylesheet" type="text/css" />
    <link href="@Constants.Admin_Url/assets/libs/datatables/buttons.bootstrap4.css" rel="stylesheet" type="text/css" />
    <link href="@Constants.Admin_Url/assets/libs/datatables/responsive.bootstrap4.css" rel="stylesheet" type="text/css" />
    <link href="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
}

@section scripts{
    <script src="@Constants.Admin_Url/assets/libs/datatables/jquery.dataTables.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/datatables/dataTables.bootstrap4.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/datatables/dataTables.responsive.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/datatables/responsive.bootstrap4.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <script>
        function delele(id) {
            Swal.fire({
                title: '@Html.Raw(Text["Confirm to delete!","Hãy xác nhận?"])',
                text: '@Html.Raw(Text["Delete operation cannot be undone","Thao tác xóa không thể hoàn tác"])',
                type: "warning",
                showCancelButton: !0,
                confirmButtonText: '@Text["OK","Được"]',
                cancelButtonText: '@Text["Wait!","Khoan!"]',
                confirmButtonClass: "btn btn-success mt-2",
                cancelButtonClass: "btn btn-danger ml-2 mt-2",
                buttonsStyling: !1
            }).then(function (t) {
                t.value ? $.ajax({
                    url: "@Constants.Admin_Url/post?delete",
                    type: "POST",
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    data: { __RequestVerificationToken: '@AntiForgeryTokenForAjaxPost()', Id: id },
                    success: function (result) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Congratulation!", "Chúc mừng!"])',
                            text: result,
                            type: "success"
                        }).then(function (t) { location.reload(); })
                    },
                    error: function (errormessage) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Oh, no!", "Thôi xong!"])',
                            text: errormessage.responseText,
                            type: "error"
                        })
                    }
                }) : {}
            });
        }

        $(document).ready(function () {
            jQuery.extend(jQuery.fn.dataTableExt.oSort, {
                "formatted-num-pre": function (a) {
                    a = (a === "-" || a === "") ? 0 : a.replace(/[^\d\-\.]/g, "");
                    return parseFloat(a);
                },
                "formatted-num-asc": function (a, b) {
                    return a - b;
                },
                "formatted-num-desc": function (a, b) {
                    return b - a;
                }
            });

            $('#datatable').DataTable({
                "aaSorting": [],
                "columnDefs": [{ type: 'formatted-num', targets: 0 }],
                "pageLength": 100,
                "lengthChange": false,
            });
        });
    </script>
}