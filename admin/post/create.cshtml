@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Node> field = new FieldExtractor<PP_Node>();
    private PP_Node model = new PP_Node() { NodeType = "post", NodeStatus = "CREATED" };

    private Action ProcessPost()
    {
        AntiForgery.Validate();

        Validation.RequireField(field.GetName(t => t.Title), "Tiêu đề không thể để trống!");
        Validation.RequireField(field.GetName(t => t.NodePath), "Alias không thể để trống!");
        Validation.Add(field.GetName(t => t.NodePath), Validator.Regex(@"^[a-z0-9]+(\-[a-z0-9]+)*$", "Alias không đúng định dạng!"));

        model.LangId = LangIdCompose;
        //model.PageId = Request.Form[field.GetName(t => t.PageId)].AsInt();
        model.Title = Request.Form[field.GetName(t => t.Title)].NullIfWhiteSpace();
        model.Summary = Server.HtmlDecode(Request.Form[field.GetName(t => t.Summary)]).NullIfWhiteSpace();
        model.Content = Server.HtmlDecode(Request.Form[field.GetName(t => t.Content)]).NullIfWhiteSpace();
        model.Featured = Request.Form[field.GetName(t => t.Featured)].AsBool();
        model.MetaDescription = Request.Form[field.GetName(t => t.MetaDescription)].NullIfWhiteSpace();
        model.MetaKeywords = Request.Form[field.GetName(t => t.MetaKeywords)].NullIfWhiteSpace();
        model.ImageUrl = Request.Form[field.GetName(t => t.ImageUrl)].NullIfWhiteSpace();
        model.ModifiedBy = DisplayName;

        if (!Validation.IsValid())
        {
            return EmptyAction;
        }
        var listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
        int? cat = listcat.Split(',').FirstOrDefault().AsInt();
        if (cat == 0)
        {
            ModelState.AddFormError("Bắt buộc phải chọn một chuyên mục");
            return EmptyAction;
        }





        //List<string> add = new List<string>();

        //List<string> catlist = listcat.Split(',').ToList();
        //foreach(var item in catlist.EmptyIfNull())
        //{
        //    var idcheck = item.AsInt();
        //    var cattitle = Db.GetOne<PP_Category>(x=>x.Id == idcheck);

        //    var idnode = cattitle.Id.ToString();

        //    add.Add(idnode);
        //}


        model.listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
        var catDetalis = new PP_Category_details();


        var category = Db.GetOne<PP_Category>(cat ?? 0);
        var page = Db.GetOne<PP_Page>(category.PageIdItem);
        model.NodePath = string.Format(page.PathPattern, Request.Form[field.GetName(t => t.NodePath)]);
        if (Db.Exists<PP_Node>(t => t.NodePath == model.NodePath))
        {
            ModelState.AddFormError($"Đường dẫn [{model.NodePath}] đã tồn tại!");
            return EmptyAction;
        }
        HashSet<int> seenIds = new HashSet<int>();
        int id;


        foreach (var item in listcat.Split(','))
        {
            if (!string.IsNullOrWhiteSpace(item) && int.TryParse(item, out id) && !seenIds.Contains(id))
            {
                seenIds.Add(id);
            }
            else
            {
                ModelState.AddFormError("Danh mục bị trùng lặp");
                return EmptyAction;
            }
        }
        Db.Insert<PP_Node>(model);
        foreach (var item in listcat.Split(','))
        {

            if (int.TryParse(item, out id))
            {
                var idproduct = model.Id;

                seenIds.Add(id);
                PP_Category_details catDetails = new PP_Category_details();
                catDetails.Idcat = id;
                catDetails.LangId = LangIdCompose;
                catDetails.PageId = model.PageId;
                catDetails.NodeType = "post";
                catDetails.PageIdItem = category.PageIdItem;
                catDetails.Idproduct = model.Id;
                Db.Insert<PP_Category_details>(catDetails);
            }


        }


        Root.ClearCache();
        return () => Response.Redirect($"{Constants.Admin_Url}/post/index?id={model.Id}");
    }
}
@{
    CheckAuthen()();
    if (IsPost)
    {
        try
        {
            ProcessPost().Invoke();
        }
        catch (Exception ex)
        {
            ModelState.AddFormError(ex.Message);
        }
    }

    int categoryId = Request.QueryString[field.GetName(t => t.CategoryId)].AsInt();
    if (categoryId > 0)
    {
        model.CategoryId = categoryId;
    }

    Page.Title = Text["CREATE A POST", "THÊM BÀI VIẾT MỚI"];
    Page.Menu = "post";

    var pageSelections = Db.GetList<PP_Page>(t => t.LangId == LangIdCompose
                                               && t.NodeType == "post"
                                               && t.PageType == "item")
        .ToDictionary(t => t.Id.ToString(), t => t.Title);

    var category = Db.GetOne<PP_Category>(model.CategoryId ?? 0);
    var linkOptions = Db.GetLinks(LangIdCompose);

}
<div class="modal fade" id="insertLinkModal" tabindex="-1" role="dialog"
     aria-labelledby="exampleModalScrollableTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title" id="exampleModalScrollableTitle">Modal title</h4>*@
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach (var link in linkOptions)
                {
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">@link.Item1</span>
                        </div>
                        <input type="text" class="form-control" value="@link.Item2" disabled>
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button" data-dismiss="modal" onclick="javascript:insertLink('@link.Item2')">@Text["Select link", "Chọn link"]</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách bài viết" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/category?type=post" aria-expanded="false" class="nav-link">
                            <i class="fe-folder"></i> @Text["Categories", "Các chuyên mục"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/post@(categoryId > 0 ? $"?groupId={categoryId}":"")" aria-expanded="true" class="nav-link">
                            <i class="fas fa-list-ol"></i> @Text["All of posts", "Tất cả bài viết"]
                        </a>
                    </li>
                    @if (categoryId > 0)
                    {
                        <li class="nav-item">
                            <a href="@Constants.Admin_Url/post@(categoryId > 0 ? $"?categoryId={categoryId}" : "")" aria-expanded="true" class="nav-link">
                                <i class="fas fa-list-ol"></i> @category.Title
                            </a>
                        </li>
                    }
                    <li class="nav-item">
                        <a href="#create" data-toggle="tab" aria-expanded="false" class="nav-link active">
                            <i class="fas fa-plus-circle"></i> @Text["Create new post", "Thêm bài viết mới"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="create">
                        <form class="form-horizontal validable" role="form" method="post">

                            @AntiForgery.GetHtml()

                            @if (ModelState.Any())
                            {
                                <div class="alert alert-danger" role="alert">
                                    @Html.ValidationSummary(Text["Operation failed!", "Thao tác không thành công!"], excludeFieldErrors: false, htmlAttributes: null)
                                </div>
                            }

                            @MyHtml.ComposeLanguageSwitch()
                            @*MyHtml.ComboboxFor(field[t => t.PageId], options: pageSelections, value: model.PageId.ToString())*@
                            @MyHtml.ListComboboxFor(field[t => t.CategoryId], options: GetGroupSelector(LangIdCompose, "post"), value: (model.CategoryId ?? 0).ToString())
                            @MyHtml.TextBoxFor(field[t => t.Title], value: model.Title, required: true)
                            @MyHtml.TextBoxFor(field[t => t.NodePath], value: model.NodePath.GetAfterLast("/").GetBefore("."), required: true)
                            @MyHtml.TextAreaFor(field[t => t.Summary], value: model.Summary, required: true)
                            @MyHtml.TextAreaFor(field[t => t.Content], value: model.Content, required: true)
                            @*@MyHtml.TextAreaFor(field[t => t.Content], value: model.Content, required: true)*@
                            @MyHtml.RadioFor(field[t => t.Featured], value: model.Featured)
                            @MyHtml.TextBoxFor(field[t => t.MetaDescription], value: model.MetaDescription)
                            @MyHtml.TagsInputFor(field[t => t.MetaKeywords], value: model.MetaKeywords)
                            @MyHtml.ImagePickerFor(field[t => t.ImageUrl], value: model.ImageUrl)
                            <hr />

                            <div class="form-group mb-0">
                                <div>
                                    <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                        @Text["Continue", "Tiếp tục"]
                                    </button>
                                    <button type="button" class="btn btn-light waves-effect ml-1" onclick="window.history.back()">
                                        @Text["Back", "Quay lại"]
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section head{
}

@section scripts{
    <script src="@Constants.Admin_Url/ckeditor/ckeditor.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/ckfinder/ckfinder.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/speakingurl/speakingurl.min.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/stringtoslug/jquery.stringtoslug.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/parsleyjs/parsley.min.js"></script>
    <script>
        function addCat(fieldName, fieldTitle, optionsJson) {
            const options = JSON.parse(optionsJson.replace(/&quot;/g, '"'));
            const container = document.getElementById('comboboxlist');
            const index = container.querySelectorAll('.comboboxlist').length;

            let optionsHtml = '';
            for (const key in options) {
                if (options.hasOwnProperty(key)) {
                    optionsHtml += `<option value="${key}">${options[key]}</option>`;
                }
            }
            const newImagePicker = `
                                <div class="form-group row comboboxlist">
                                <label originId="${fieldName}" class="col-12 col-md-2 col-form-label" for="${fieldName}">
                                    Chuyên mục
                                </label>
                                <div class="col-12 col-md-9">
                                    <select class="form-control" originId="${fieldName}" id="${fieldName}" name="${fieldName}">
                                        ${optionsHtml}
                                    </select>
                                </div>
                                <div class="col-md-1">
        <div class="btn-group">
            <button type="button" class="btn btn-danger btn-sm delete-btn" onclick="deleteCat(this)">
                <i class="fa fa-trash"></i>
            </button>
        </div>
</div>
                            </div>
                            <div class="row">
                                <div class="col-md-11">
                                </div>

                            </div>`;
            container.insertAdjacentHTML('beforeend', newImagePicker);
        }
        function deleteCat(button) {
            // Find the closest row containing the button
            var row = button.closest('.row');

            // Find the previous element sibling of this row that has the class 'comboboxlist'
            var item = row.previousElementSibling;
            while (item && !item.classList.contains('comboboxlist')) {
                item = item.previousElementSibling;
            }

            // Log button and item for debugging
            console.log(button);
            console.log(item);

            // Remove the found element if it exists
            if (item) {
                item.remove();
            } else {
                console.error('Parent element with class "comboboxlist" not found.');
            }

            // Remove the row containing the delete button
            if (row) {
                row.remove();
            }
        }

    </script>
    <script type="text/javascript">

                                  CKEDITOR.replace('@field.GetName(t => t.Summary)', {
    toolbar: [[
        'Source', 'Format', 'FontSize',
        'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock',
        'Outdent', 'Indent', '-',
        'Bold', 'Italic', 'Underline', 'Strike',
        '-', 'TextColor', 'BGColor',
        'NumberedList', 'BulletedList',
        '-', 'Link', 'Unlink', 'Anchor',
        'Image', 'Table', 'Smiley', 'SpecialChar', 'Iframe',
        'Blockquote',
        'RemoveFormat', 'ShowBlocks', 'Maximize',
        '-', 'Cut', 'Copy', 'Paste', 'Undo', 'Redo'
    ]],
    filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
    entities_latin: false,
    htmlEncodeOutput: true,
    resize_dir: "vertical",
    width: "100%",
    extraPlugins: 'iframe' // Nếu dùng các plugin khác thì thêm vào đây
});


               CKEDITOR.replace('@field.GetName(t => t.Content)', {
    toolbar: [[
        'Source', 'Format', 'FontSize',
        'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock',
        'Outdent', 'Indent', '-',
        'Bold', 'Italic', 'Underline', 'Strike',
        '-', 'TextColor', 'BGColor',
        'NumberedList', 'BulletedList',
        '-', 'Link', 'Unlink', 'Anchor',
        'Blockquote',
        'Image', 'Table', 'Smiley', 'SpecialChar', 'Iframe',
        'RemoveFormat', 'ShowBlocks', 'Maximize',
        '-', 'Cut', 'Copy', 'Paste', 'Undo', 'Redo'
    ]],
    filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
    entities_latin: false,
    htmlEncodeOutput: true,
    resize_dir: "vertical",
    width: "100%",
    extraPlugins: 'iframe' // Nếu dùng các plugin khác thì thêm vào đây
});


        $(document).ready(function() {
            $(document).on("click",".btn-ckfinder-popup",function(e) {
                event.preventDefault();
                var targetId=$(this).attr('target');

                window["callback_"+targetId]=function(fileUrl) {
                    var url = new URL(fileUrl);
                    $('#'+targetId).val(url.pathname);
                    $('#img-'+targetId).attr("src", url.pathname);
                }

                CKFinder.popup({
                    chooseFiles: true,
                    width: 800,
                    height: 600,
                    selectActionFunction: window["callback_"+targetId]
                });
            });

            $("#@field.GetName(t=>t.Title)").stringToSlug({
                getPut: '#@field.GetName(t => t.NodePath)',
            });

            $(".validable").parsley();
        });

    </script>
}