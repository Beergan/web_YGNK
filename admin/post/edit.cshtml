@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Node> field = new FieldExtractor<PP_Node>();
    private PP_Node model = null;
}
@{
    CheckAuthen()();
    int itemId;
    if (!int.TryParse(Request.QueryString[field.GetName(t => t.Id)].NullIfWhiteSpace() ?? Request.Form[field.GetName(t => t.Id)], out itemId))
    {
        Response.Redirect($"{Constants.Admin_Url}/post");
    }

    model = Db.GetOne<PP_Node>(itemId);

    if (model == null || model.NodeType != "post")
    {
        Response.Redirect($"{Constants.Admin_Url}/post");
    }

    var query = Request.Url.Query;
    if (IsPost && query == "?update_compt")
    {
        new Func<Action>(() =>
        {
            try
            {
                AntiForgery.Validate();
                var action = Request.Form["action"].NullIfWhiteSpace();
                var jsonData = Request.Unvalidated("JsonData");

                try
                {
                    Json.Decode<Dictionary<string, object>>(jsonData);
                }
                catch
                {
                    return AjaxResult.Fail("Giá trị Json không hợp lệ!");
                }

                model.Content = jsonData;
                Db.Update<PP_Node>(model);
                Root.ClearCache();
                return AjaxResult.Ok("Cập nhật thành công!");
            }
            catch (Exception ex)
            {
                return AjaxResult.Fail(ex.Message);
            }
        })()();
    }
    else if (IsPost)
    {
        new Func<Action>(() =>
        {
            try
            {
                AntiForgery.Validate();

                Validation.RequireField(field.GetName(t => t.Title), "Tiêu đề không thể để trống!");
                Validation.RequireField(field.GetName(t => t.NodePath), "Alias không thể để trống!");
                Validation.Add(field.GetName(t => t.NodePath), Validator.Regex(@"^[a-z0-9]+(\-[a-z0-9]+)*$"));
                model.CategoryId = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                model.Title = Request.Form[field.GetName(t => t.Title)].NullIfWhiteSpace();
                model.Summary = Server.HtmlDecode(Request.Form[field.GetName(t => t.Summary)]).NullIfWhiteSpace();
                model.Content = Server.HtmlDecode(Request.Form[field.GetName(t => t.Content)]).NullIfWhiteSpace();
                model.Featured = Request.Form[field.GetName(t => t.Featured)].AsBool();
                model.MetaDescription = Request.Form[field.GetName(t => t.MetaDescription)].NullIfWhiteSpace();
                model.MetaKeywords = Request.Form[field.GetName(t => t.MetaKeywords)].NullIfWhiteSpace();
                model.ImageUrl = Request.Form[field.GetName(t => t.ImageUrl)].NullIfWhiteSpace();
                model.ModifiedBy = DisplayName;

                if (!Validation.IsValid())
                {
                    ModelState.AddFormError("Dữ liệu không hợp lệ!");
                    return EmptyAction;
                }

                if (model.CategoryId == 0)
                {
                    ModelState.AddFormError("Bắt buộc phải chọn một chuyên mục");
                    return EmptyAction;
                }
                var listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
                int? cat = listcat.Split(',').FirstOrDefault().AsInt();
                if (cat == 0)
                {
                    ModelState.AddFormError("Bắt buộc phải chọn một chuyên mục");
                    return EmptyAction;
                }
                var category1 = Db.GetOne<PP_Category>(cat ?? 0);
                var page1 = Db.GetOne<PP_Page>(category1.PageIdItem);
                var tempAlias = string.Format(page1.PathPattern, Request.Form[field.GetName(t => t.NodePath)]);

                if (tempAlias != model.NodePath
                && Db.Exists<PP_Node>(t => t.NodePath == tempAlias))
                {
                    ModelState.AddFormError($"Đường dẫn [{model.NodePath}] đã tồn tại!");
                    return EmptyAction;
                }
                model.listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
                var catDetalis = new PP_Category_details();

                HashSet<int> seenIds = new HashSet<int>();
                int id;
                model.NodePath = tempAlias;
                Db.Update<PP_Node>(model);
                var categoryIds = listcat.Split(',').Select(int.Parse).ToList();
                foreach (var item in listcat.Split(','))
                {
                    if (!string.IsNullOrWhiteSpace(item) && int.TryParse(item, out id) && !seenIds.Contains(id))
                    {
                        seenIds.Add(id);
                    }
                    else
                    {
                        ModelState.AddFormError("Danh mục bị trùng lặp");
                        return EmptyAction;
                    }
                }

                foreach (var idcat in categoryIds)
                {
                    var idproduct = model.Id;
                    var dbcat_details = Db.Table<PP_Category_details>().Where(x => x.Idcat == idcat && x.Idproduct == idproduct && x.NodeType == "node").ToArray();

                    if (dbcat_details.Any())
                    {
                        foreach (var idupdate in dbcat_details)
                        {
                            var checkidnode = Db.GetOne<PP_Category_details>(x => x.Id == idupdate.Id);
                            checkidnode.Idcat = idcat;
                            checkidnode.LangId = LangIdCompose;
                            checkidnode.PageId = model.PageId;
                            checkidnode.NodeType = category1.NodeType;
                            checkidnode.PageIdItem = category1.PageIdItem;
                            checkidnode.Idproduct = model.Id;
                            Db.Update(checkidnode);
                        }
                    }
                    else
                    {
                        var catlistnew = new PP_Category_details
                        {
                            Idcat = idcat,
                            LangId = LangIdCompose,
                            PageId = model.PageId,
                            NodeType = category1.NodeType,
                            PageIdItem = category1.PageIdItem,
                            Idproduct = model.Id
                        };
                        Db.Insert(catlistnew);
                    }
                }

                // Delete any entries not in the new list of categories
                var deleteList = Db.Table<PP_Category_details>()
             .Where(x => x.Idproduct == model.Id && x.NodeType == "node" && (!x.Idcat.HasValue || !categoryIds.Contains(x.Idcat.Value)))
             .ToList();

                if (deleteList.Any())
                {
                    foreach (var item in deleteList)
                    {
                        Db.Delete<PP_Category_details>(item.Id);
                    }
                }


                Root.ClearCache();
                return () => Response.Redirect($"{Constants.Admin_Url}/post?CategoryId={cat}");
            }

            catch (Exception ex)
            {
                return () => ModelState.AddFormError(ex.Message);
            }
        })()();
    }

    Page.Title = Text["MODIFY A POST", "HIỆU CHỈNH BÀI VIẾT"];
    Page.Menu = "post";

    var pageSelections = Db.GetList<PP_Page>(t => t.LangId == LangIdCompose
                                               && t.NodeType == "post"
                                               && t.PageType == "item")
        .ToDictionary(t => t.Id.ToString(), t => t.Title);

    var category = Db.GetOne<PP_Category>(model.CategoryId ?? 0);
    //var page = Db.GetOne<PP_Page>(category.PageIdItem);
    //var compt = Db.GetOne<PP_Compt>(x => x.ComptKey == page.ComptKey);
    //var comptSchema = Json.Decode<ObjectSchema>(compt.JsonSchema);
    //var comptData = model.Content != null ? Json.Decode<Dictionary<string, object>>(model.Content)
    //                : Json.Decode<Dictionary<string, object>>(compt.JsonDefault);
    var linkOptions = Db.GetLinks(LangIdCompose);

}
<div class="modal fade" id="insertLinkModal" tabindex="-1" role="dialog"
     aria-labelledby="exampleModalScrollableTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title" id="exampleModalScrollableTitle">Modal title</h4>*@
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach (var link in linkOptions)
                {
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">@link.Item1</span>
                        </div>
                        <input type="text" class="form-control" value="@link.Item2" disabled>
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button" data-dismiss="modal" onclick="javascript:insertLink('@link.Item2')">@Text["Select link", "Chọn link"]</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách bài viết" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/category?type=post" aria-expanded="false" class="nav-link">
                            <i class="fe-folder"></i> @Text["Categories", "Các chuyên mục"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/post?groupId=@model.CategoryId" aria-expanded="true" class="nav-link">
                            <i class="fas fa-list-ol"></i> @Text["All of posts", "Tất cả bài viết"]
                        </a>
                    </li>
                    @if (@model.CategoryId > 0)
                    {
                        <li class="nav-item">
                            <a href="@Constants.Admin_Url/post?categoryId=@model.CategoryId" aria-expanded="true" class="nav-link">
                                <i class="fas fa-list-ol"></i> @category.Title
                            </a>
                        </li>
                    }
                    <li class="nav-item">
                        <a href="#edit" data-toggle="tab" aria-expanded="false" class="nav-link active">
                            <i class="fe-edit"></i> @Text["Modify a post", "Hiệu chỉnh bài viết"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="edit">
                        <div class="card">
                            <div class="card-header">
                                Thông tin cơ bản <button type="button" class="btn btn-info float-right" data-toggle="collapse" aria-expanded="true" data-target="#main"><i class="fa fa-chevron-down pull-right"></i></button>
                            </div>
                            <div class="card-body collapse" id="main">
                                <form class="form-horizontal validable" role="form" method="post" style="margin-bottom: 20px;">
                                    @AntiForgery.GetHtml()

                                    @if (ModelState.Any())
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            @Html.ValidationSummary("Thao tác không thành công!", excludeFieldErrors: true, htmlAttributes: null)
                                        </div>
                                    }

                                    @MyHtml.TextBoxFor(field[t => t.LangId], value: $"{model.LangId} ({Root.Langs[model.LangId].Title})", disabled: true)
                                    @*MyHtml.ComboboxFor(field[t => t.PageId], options: pageSelections, value: model.PageId.ToString())*@
                                    @MyHtml.ListComboboxFor(field[t => t.CategoryId], options: GetGroupSelector(LangIdCompose, "post"), value: (model.listcat).ToString())
                                    @MyHtml.TextBoxFor(field[t => t.Title], value: model.Title, required: true)
                                    @MyHtml.TextBoxFor(field[t => t.NodePath], value: model.NodePath.GetAfterLast("/").GetBefore("."), required: true)
                                    @MyHtml.TextAreaFor(field[t => t.Summary], value: model.Summary)
                                    @MyHtml.TextAreaFor(field[t => t.Content], value: model.Content)
                                    @MyHtml.RadioFor(field[t => t.Featured], value: model.Featured)
                                    @MyHtml.TextBoxFor(field[t => t.MetaDescription], value: model.MetaDescription)
                                    @MyHtml.TagsInputFor(field[t => t.MetaKeywords], value: model.MetaKeywords)
                                    @MyHtml.ImagePickerFor(field[t => t.ImageUrl], value: model.ImageUrl)
                                    <hr />

                                    <div class="form-group mb-0">
                                        <div>
                                            <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                                @Text["Submit", "Xác nhận"]
                                            </button>
                                            <button type="button" class="btn btn-light waves-effect ml-1" onclick="window.history.back()">
                                                @Text["Back", "Quay lại"]
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>

                        @*@{
                                bool hasConfigured = model.Content != null;
                                bool isEmptyCompt = comptSchema.SingleFieldTypes.Count == 0
                                                    && comptSchema.ArrayFieldTypes.Count == 0
                                                    && comptSchema.SingleObjectTypes.Count == 0
                                                    && comptSchema.ArrayObjectTypes.Count == 0;

                                <div class="card">
                                    <div class="card-header">
                                        Thông tin chi tiêt@(!hasConfigured?Text[" (Need config)", " (Chưa cấu hình)"] :"") <button type="button" class="btn btn-info float-right collapsed" data-toggle="collapse" data-target="#@compt.ComptKey"><i class="fa fa-chevron-down pull-right"></i></button>
                                    </div>
                                    <div class="card-body collapse show" id="@compt.ComptKey">
                                        @if (comptData.ContainsKey("Phrases"))
                                        {
                                            var phrases = comptData["Phrases"] as IDictionary<string, object>;
                                            if (phrases != null && phrases.Count > 0 && LangIdCompose != "vi" && LangIdCompose != "en")
                                            {
                                                <div class="card">
                                                    <div class="card-header">
                                                        @Text[en: "Translation", vi: "Dịch thuật"] <button type="button" class="btn btn-info float-right collapsed" data-toggle="collapse" data-target="#phrases"><i class="fa fa-chevron-down pull-right"></i></button>
                                                    </div>
                                                    <div class="card-body collapse" id="phrases">
                                                        @foreach (var f in phrases)
                                                        {
                                                            @MyHtml.TextBoxFor(new Field { Name = f.Key, Title = $"{Text["Translate to", "Dịch sang"]} {LangCompose.Title} <{f.Key}>" }, value: (string)f.Value)
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        }

                                        @MyHtml.RenderSchema(comptSchema, "post", comptData)
                                        <hr />

                                        <div class="form-group mb-0">
                                            <form class="form-horizontal subform" role="form" method="post" action="?update_compt">
                                                @AntiForgery.GetHtml()
                                                <input type="hidden" name="LangId" value="@LangIdCompose" />
                                                <input type="hidden" name="Id" value="@model.Id" />
                                                <input type="hidden" name="JsonData" />
                                                <div>
                                                    <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                                        @Text[$"Submit", "Xác nhận"]
                                                    </button>
                                                    <button type="button" class="btn btn-danger reset">
                                                        Reset
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            }*@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section head{
    <link href="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
    <style>
        .card-header {
            background-color: #eee;
            line-height: 40px;
            font-weight: bold;
        }

        .card-template {
            display: none;
        }

        .card-header .fa {
            transition: .3s transform ease-in-out;
        }

        .card-header .collapsed .fa {
            transform: rotate(90deg);
        }
    </style>
}

@section scripts{
    <script src="@Constants.Admin_Url/ckeditor/ckeditor.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/ckfinder/ckfinder.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/speakingurl/speakingurl.min.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/stringtoslug/jquery.stringtoslug.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/parsleyjs/parsley.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <script>
        function addCat(fieldName, fieldTitle, optionsJson) {
            const options = JSON.parse(optionsJson.replace(/&quot;/g, '"'));
            const container = document.getElementById('comboboxlist');
            const index = container.querySelectorAll('.comboboxlist').length;

            let optionsHtml = '';
            for (const key in options) {
                if (options.hasOwnProperty(key)) {
                    optionsHtml += `<option value="${key}">${options[key]}</option>`;
                }
            }
            const newImagePicker = `
                                <div class="form-group row comboboxlist">
                                <label originId="${fieldName}" class="col-12 col-md-2 col-form-label" for="${fieldName}">
                                    Chuyên mục
                                </label>
                                <div class="col-12 col-md-9">
                                    <select class="form-control" originId="${fieldName}" id="${fieldName}" name="${fieldName}">
                                        ${optionsHtml}
                                    </select>
                                </div>
                                <div class="col-md-1">
        <div class="btn-group">
            <button type="button" class="btn btn-danger btn-sm delete-btn" onclick="deleteCat(this)">
                <i class="fa fa-trash"></i>
            </button>
        </div>
</div>
                            </div>
                            <div class="row">
                                <div class="col-md-11">
                                </div>

                            </div>`;
            container.insertAdjacentHTML('beforeend', newImagePicker);
        }
        function deleteCat(button) {
            // Find the closest row containing the button
            var row = button.closest('.row');

            // Find the previous element sibling of this row that has the class 'comboboxlist'
            var item = row.previousElementSibling;
            while (item && !item.classList.contains('comboboxlist')) {
                item = item.previousElementSibling;
            }

            // Log button and item for debugging
            console.log(button);
            console.log(item);

            // Remove the found element if it exists
            if (item) {
                item.remove();
            } else {
                console.error('Parent element with class "comboboxlist" not found.');
            }

            // Remove the row containing the delete button
            if (row) {
                row.remove();
            }
        }

    </script>
    <script type="text/javascript">
        var insertLinkTarget = '';
        function create_UUID() {
            var dt = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (dt + Math.random() * 16) % 16 | 0;
                dt = Math.floor(dt / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });

            return uuid;
        }
                          CKEDITOR.replace('@field.GetName(t => t.Summary)', {
    toolbar: [[
        'Source', 'Format', 'FontSize',
        'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock',
        'Outdent', 'Indent', '-',
        'Bold', 'Italic', 'Underline', 'Strike',
        '-', 'TextColor', 'BGColor',
        'NumberedList', 'BulletedList',
        '-', 'Link', 'Unlink', 'Anchor',
        'Image', 'Table', 'Smiley', 'SpecialChar', 'Iframe',
        'Blockquote', 
        'RemoveFormat', 'ShowBlocks', 'Maximize',
        '-', 'Cut', 'Copy', 'Paste', 'Undo', 'Redo'
    ]],
    filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
    entities_latin: false,
    htmlEncodeOutput: true,
    resize_dir: "vertical",
    width: "100%",
    extraPlugins: 'iframe' // Nếu dùng các plugin khác thì thêm vào đây
});


               CKEDITOR.replace('@field.GetName(t => t.Content)', {
    toolbar: [[
        'Source', 'Format', 'FontSize',
        'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock',
        'Outdent', 'Indent', '-',
        'Bold', 'Italic', 'Underline', 'Strike',
        '-', 'TextColor', 'BGColor',
        'NumberedList', 'BulletedList',
        '-', 'Link', 'Unlink', 'Anchor',
        'Blockquote',
        'Image', 'Table', 'Smiley', 'SpecialChar', 'Iframe',
        'RemoveFormat', 'ShowBlocks', 'Maximize',
        '-', 'Cut', 'Copy', 'Paste', 'Undo', 'Redo'
    ]],
    filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
    entities_latin: false,
    htmlEncodeOutput: true,
    resize_dir: "vertical",
    width: "100%",
    extraPlugins: 'iframe' // Nếu dùng các plugin khác thì thêm vào đây
});


        function getJsonData(context) {
            var jsondata = {}

            //$("> .card > .card-body-singleFields", context).each(function () {
            $(context).children(".card-body-singleFields").each(function () {
                console.log(this)
                $('input, select, textarea', this).each(function () {
                    if ($(this).hasAttr("myckeditor")) {
                        jsondata[this.getAttribute('originId')] = CKEDITOR.instances[$(this).attr('id')].getData();
                    } else if ($(this).hasAttr("mycheckbox")) {
                        jsondata[this.getAttribute('originId')] = $(this).is(':checked');
                    } else {
                        jsondata[this.getAttribute('originId')] = this.value.trim();
                    }
                });
            });

            $("> .card > .card-body-arrayField", context).each(function () {
                var arrayField = [];
                $('input, select, textarea', this).each(function () {
                    var value = $(this).val();
                    if (value) {
                        arrayField.push(value)
                    }
                });

                jsondata[this.getAttribute('originId')] = arrayField;
            });

            $("> .card > .card-body-singleObj", context).each(function () {
                var singleObj = getJsonData(this)
                jsondata[this.getAttribute('originId')] = singleObj;
            });

            $("> .card > .card-body-arrObjType", context).each(function () {
                var arrObj = [];

                $("> .card > .card-body-arrObjItem:not(.card-body-template)", this).each(function () {
                    var arrObjItem = getJsonData(this)
                    arrObj.push(arrObjItem);
                });

                jsondata[this.getAttribute('originId')] = arrObj;
            });

            return jsondata;
        }

        $(document).ready(function () {

            $.fn.hasAttr = function (name) {
                var attr = $(this).attr(name);
                return typeof attr !== typeof undefined && attr !== false;
            };

            $(document).on("click", ".btn-delete-arrFieldItem", function (e) {
                event.preventDefault();
                $(this).closest(".input-group").remove();
            })

            $(document).on("click", ".btn-insert-arrFieldItem", function (e) {
                var item = $(this).closest(".input-group");
                var newItem = item.clone();

                newItem.find("button")
                    .removeClass("btn-insert-arrFieldItem")
                    .addClass("btn-delete-arrFieldItem")
                    .removeClass("btn-primary")
                    .addClass("btn-danger");

                newItem.find("button > i")
                   .removeClass("fe-plus-circle")
                   .addClass("fe-x-circle");

                newItem.insertBefore(item);
                $(item).find("input").val(null);
            })

            $(document).on("click", ".btn-delete-arrObjDataItem", function (e) {
                event.preventDefault();
                $(this).closest(".card").remove();
            })

            $(document).on("click", ".btn-insert-arrObjDataItem", function (e) {
                event.preventDefault();

                var guid = create_UUID();
                var cardBody = $(this).closest(".card-body-arrObjType");
                var template = $(cardBody).children(".card-template").clone();
                template.removeClass("card-template").addClass("card");

                var btn_card_header_arrObjType = template.find(".btn-card-header-arrObjType");
                btn_card_header_arrObjType.attr("data-target", btn_card_header_arrObjType.attr("data-target") + "-" + guid)
                console.log(btn_card_header_arrObjType.attr("data-target"));

                var card_body_arrObjItem = template.find(".card-body-arrObjItem");
                card_body_arrObjItem.attr("id", card_body_arrObjItem.attr("id") + "-" + guid)
                card_body_arrObjItem.removeClass("card-body-template");
                console.log(card_body_arrObjItem.attr("id"));

                $("> div > .card-body-singleFields > div", template).each(function () {

                    var subGuid = create_UUID();

                    $(this).find('input, checkbox, select, textarea').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("name")) {
                            $(this).attr('name', originId + '-' + subGuid);
                        }

                        if ($(this).hasAttr("id")) {
                            $(this).attr('id', originId + '-' + subGuid);
                        }

                        if ($(this).hasAttr("value")) {
                            $(this).val('')
                        }
                    });

                    $(this).find('label').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("for")) {
                            $(this).attr('for', originId + '-' + subGuid);
                        }
                    });

                    $(this).find('button').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("target")) {
                            $(this).attr('target', originId + '-' + subGuid);
                        }
                    });

                    $(this).find('img').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("id")) {
                            $(this).attr('id', "img-" + originId + '-' + subGuid);
                        }

                        //if($(this).hasAttr("src")) {
                        //    $(this).attr('src','/img/no-image.jpg');
                        //}
                    });
                });

				template.insertBefore($(this).parents(".button-card-body-arrObjType"));

				$(".myckeditor").each(function (index) {
					CKEDITOR.replace($(this).attr("id"), {
						toolbar: [['Source', 'Format', 'FontSize', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'Outdent', 'Indent',
					   '-', 'Bold', 'Italic', 'Underline', 'Strike',
					   '-', 'TextColor', 'BGColor', 'NumberedList', 'BulletedList',
					   '-', 'Link', 'Image', 'Table', 'RemoveFormat', 'Maximize']],
						filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
						entities_latin: false,
						htmlEncodeOutput: true,
						resize_dir: "vertical",
						width: "100%",
						padding: "0px !important"
					});
				});
            });

            $(document).on("click", ".btn-move-up-arrObjDataItem", function (e) {
                event.preventDefault();

                var item = $(this).closest(".card");
                item.insertBefore(item.prev());
            });

            $(document).on("click", ".btn-move-down-arrObjDataItem", function (e) {
                event.preventDefault();

            });

            function submit_subform(form, act) {
				var card = $(form).parents(".card-body");
				var langId = $("input[name='LangId']", form).val();
				var comptKey = $("input[name='ComptKey']", form).val();
				var pageId = $("input[name='Id']", form).val();
				var action = $(form).attr("action")
				var jsondata = getJsonData(card);

				$("input[name='JsonData']", form).val(JSON.stringify(jsondata, null, 0));

                //Swal.fire({
                //    title: 'Auto close alert!',
                //    html: 'I will close in <b></b> milliseconds.',
                //    onOpen: () => { Swal.showLoading();},
                //});

                $.ajax({
                    url: "@Constants.Admin_Url/post/edit" + action,
                    type: "POST",
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    data: { __RequestVerificationToken: '@AntiForgeryTokenForAjaxPost()', LangId: langId, Id: pageId, ComptKey: comptKey, action: act, Jsondata: JSON.stringify(jsondata, null, 0) },
                    success: function (result) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Congratulation!", "Chúc mừng!"])',
                            text: result,
                            type: "success"
                        }).then(function (t) { location.reload(); })
                    },
                    error: function (errormessage) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Oh, no!", "Thôi xong!"])',
                            text: errormessage.responseText,
                            type: "error"
                        })
                    }
                });
            }

			$('.subform .reset').click(function (event) {
				submit_subform($(this).closest("form"), 'reset');
			});

            $('.subform').on('submit', function (event) {
                event.preventDefault();
                submit_subform(this, 'update');
            });

            $(document).on("click", ".btn-ckfinder-popup", function (e) {
                event.preventDefault();
                var targetId = $(this).attr('target');

                window["callback_" + targetId] = function (fileUrl) {
                    var url = new URL(fileUrl);
                    $('#'+targetId).val(url.pathname);
                    $('#img-'+targetId).attr("src", url.pathname);
                }

                CKFinder.popup({
                    chooseFiles: true,
                    width: 800,
                    height: 600,
                    selectActionFunction: window["callback_" + targetId]
                });
            });

            $(".myckeditor").each(function (index) {
                CKEDITOR.replace($(this).attr("id"), {
                    toolbar: [['Source', 'Format', 'FontSize', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'Outdent', 'Indent',
                   '-', 'Bold', 'Italic', 'Underline', 'Strike',
                   '-', 'TextColor', 'BGColor', 'NumberedList', 'BulletedList',
                   '-', 'Link', 'Image', 'Table', 'RemoveFormat', 'Maximize']],
                    filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
                    entities_latin: false,
                    htmlEncodeOutput: true,
                    resize_dir: "vertical",
                    width: "100%",
                    padding: "0px !important"
                });
            });

            $("#@field.GetName(t=>t.Title)").stringToSlug({
                getPut: '#@field.GetName(t => t.NodePath)',
            });

            $(".validable").parsley();

             $('#insertLinkModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                insertLinkTarget = button.data('insertback');
            })
        }); // end document ready

        function insertLink(link)
        {
            $('#' + insertLinkTarget).val(link);
        }
    </script>
}