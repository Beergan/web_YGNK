@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Page> field = new FieldExtractor<PP_Page>();
    private PP_Page model = new PP_Page() { PageType = "page", PageStatus = "CREATED" };

    private Action ProcessPost()
    {
        AntiForgery.Validate();

        Validation.RequireField(field.GetName(t => t.Title), "Tiêu đề không thể để trống!");
        Validation.RequireField(field.GetName(t => t.PathPattern), "Alias không thể để trống!");
        Validation.Add(field.GetName(t => t.PathPattern), Validator.Regex(@"^[a-z0-9]+(\-[a-z0-9]+)*$"));

        model.LangId = LangIdCompose;
        model.Title = Request.Form[field.GetName(t => t.Title)].NullIfWhiteSpace();
        model.ComptKey = Request.Form[field.GetName(t => t.ComptKey)].NullIfWhiteSpace();
        //model.Content = Server.HtmlDecode(Request.Form[field.GetName(t => t.Content)]).NullIfWhiteSpace();
        model.MetaDescription = Request.Form[field.GetName(t => t.MetaDescription)].NullIfWhiteSpace();
        model.MetaKeywords = Request.Form[field.GetName(t => t.MetaKeywords)].NullIfWhiteSpace();

        if (!Validation.IsValid())
        {
            return EmptyAction;
        }

        var compt = Db.GetOne<PP_Compt>(t => t.ComptKey == model.ComptKey);
        model.NodeType = compt.NodeType;
        model.PageType = compt.PageType;

        model.PathPattern = StringHelper.PathJoin(
        !Root.Langs[model.LangId].IsPrimary ? model.LangId : string.Empty,
        Request.Form[field.GetName(t => t.PathPattern)].RootAsEmpty() + compt.PathPostfix
    );

        if (Db.Exists<PP_Page>(t => t.PathPattern == model.PathPattern))
        {
            ModelState.AddFormError($"Định danh [{model.PathPattern}] đã tồn tại!");
            return EmptyAction;
        }

        model.ComptName = compt.ComptName;
        Db.Insert<PP_Page>(model);
        MyRouteTable.RefreshRoutes();
        return () => Response.Redirect($"{Constants.Admin_Url}/page/edit?id={model.Id}");
    }
}
@{
    CheckAuthen()();
    if (IsPost)
    {
        try
        {
            ProcessPost().Invoke();
        }
        catch (Exception ex)
        {
            ModelState.AddFormError(ex.Message);
        }
    }

    Page.Title = Text["CREATE A PAGE", "TẠO MỚI TRANG"];
    Page.Menu = "page";
    var componentOptions = Db
        .Query<PP_Compt>(t => t.ComptType == "page_template")
        .OrderBy(t=>t.ComptKey)
        .ToList()
        .ToDictionary(t => t.ComptKey, t => t.ComptName);
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách trang" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/page" aria-expanded="true" class="nav-link">
                            <i class="fas fa-list-ol"></i> @Text["List of pages", "Danh sách trang"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#create" data-toggle="tab" aria-expanded="false" class="nav-link active">
                            <i class="fas fa-plus-circle"></i> @Text["Create new page", "Tạo trang mới"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="create">
                        <form class="form-horizontal validable" role="form" method="post">
                            @AntiForgery.GetHtml()
                            @if (ModelState.Any())
                            {
                                <div class="alert alert-danger" role="alert">
                                    @Html.ValidationSummary("Thao tác không thành công!", excludeFieldErrors: false, htmlAttributes: null)
                                </div>
                            }

                            @MyHtml.ComposeLanguageSwitch()
                            @MyHtml.ComboboxFor(field[t => t.ComptKey], options: componentOptions, value: model.ComptKey)
                            @MyHtml.TextBoxFor(field[t => t.Title], value: model.Title, required: true)
                            @MyHtml.TextBoxFor(field[t => t.PathPattern], value: model.PathPattern)
                            @*@MyHtml.TextAreaFor(field[t => t.Content], value: model.Content)*@
                            @MyHtml.TextBoxFor(field[t => t.MetaDescription], value: model.MetaDescription)
                            @MyHtml.TagsInputFor(field[t => t.MetaKeywords], value: model.MetaKeywords)
                            <hr />

                            <div class="form-group mb-0">
                                <div>
                                    <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                        @Text["Contitue", "Tiếp tục"]
                                    </button>
                                    <button type="button" class="btn btn-light waves-effect ml-1" onclick="window.history.back()">
                                        @Text["Back", "Quay lại"]
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div> <!-- end row -->
    <!-- end row -->
</div>

@section head{
}

@section scripts{
    <script src="@Constants.Admin_Url/ckeditor/ckeditor.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/ckfinder/ckfinder.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/speakingurl/speakingurl.min.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/stringtoslug/jquery.stringtoslug.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/parsleyjs/parsley.min.js"></script>
    <script type="text/javascript">

        @*CKEDITOR.replace('@field.GetName(t => t.Content)',
            {
                toolbar: [['Source','Format','FontSize','JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock','Outdent','Indent',
                    '-','Bold','Italic','Underline','Strike','-','TextColor','BGColor','NumberedList','BulletedList'
                    ,'-','Link','Image','Table','RemoveFormat','Maximize']],
                filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
                entities_latin: false,
                htmlEncodeOutput: true,
                resize_dir: "vertical",
                width: "100%",
                padding: "0px !important"
            });*@

        $(document).ready(function() {
            $(document).on("click",".btn-ckfinder-popup",function(e) {
                event.preventDefault();
                var targetId=$(this).attr('target');

                window["callback_"+targetId]=function(fileUrl) {
                    var url = new URL(fileUrl);
                    $('#'+targetId).val(url.pathname);
                    $('#img-'+targetId).attr("src", url.pathname);
                }

                CKFinder.popup({
                    chooseFiles: true,
                    width: 800,
                    height: 600,
                    selectActionFunction: window["callback_"+targetId]
                });
            });

            $("#@field.GetName(t=>t.Title)").stringToSlug({
                getPut: '#@field.GetName(t => t.PathPattern)',
            });

            $(".validable").parsley();
        });

    </script>
}