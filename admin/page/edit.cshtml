@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Page> field = new FieldExtractor<PP_Page>();
    private PP_Page page = null;
}
@{
    CheckAuthen()();
    int itemId;
    if (!int.TryParse(Request.QueryString[field.GetName(t => t.Id)].NullIfWhiteSpace() ?? Request.Form[field.GetName(t => t.Id)], out itemId))
    {
        Response.Redirect($"{Constants.Admin_Url}/page");
    }

    page = Db.GetOne<PP_Page>(itemId);

    if (page == null)
    {
        Response.Redirect($"{Constants.Admin_Url}/page");
    }

    var query = Request.Url.Query;

    if (IsPost && query == "?update_compt")
    {
        new Func<Action>(() =>
        {
            try
            {
                AntiForgery.Validate();
                var action = Request.Form["action"].NullIfWhiteSpace();
                var comptKey = Request.Form[field.GetName(t => t.ComptKey)].NullIfWhiteSpace();
                var jsonData = Request.Unvalidated("JsonData");

                try
                {
                    Json.Decode<Dictionary<string, object>>(jsonData);
                }
                catch
                {
                    return AjaxResult.Fail("Giá trị Json không hợp lệ!");
                }

                var config = Db.GetOne<PP_Config>(t => t.LangId == LangIdCompose
                                               && t.PageId == page.Id
                                               && t.ConfigKey == comptKey);

                if (config != null)
                {
                    if (action == "reset")
                    {
                        var component = Db.GetOne<PP_Compt>(t => t.ComptKey == comptKey);
                        config.JsonContent = component.JsonDefault;
                        Db.Update<PP_Config>(config);
                    }
                    else
                    {
                        config.JsonContent = jsonData;
                        Db.Update<PP_Config>(config);
                    }
                    Root.RefreshConfigs();
                }
                else
                {
                    config = new PP_Config
                    {
                        LangId = LangIdCompose,
                        PageId = page.Id,
                        ConfigKey = comptKey,
                        JsonContent = jsonData
                    };

                    Db.Insert<PP_Config>(config);
                    Root.RefreshConfigs();
                }

                return AjaxResult.Ok("Cập nhật thành công!");
            }
            catch (Exception ex)
            {
                return AjaxResult.Fail(ex.Message);
            }
        })()();
    }
    else if (IsPost && query == "?update_page")
    {
        new Func<Action>(() =>
        {
            try
            {
                AntiForgery.Validate();
                Validation.RequireField(field.GetName(t => t.Title), "Tiêu đề không thể để trống!");
                Validation.RequireField(field.GetName(t => t.PathPattern), "Đường dẫn không thể để trống!");
                Validation.Add(field.GetName(t => t.PathPattern), Validator.Regex(@"^[a-z0-9]+(\-[a-z0-9]+)*$"));

                page.Title = Request.Form[field.GetName(t => t.Title)].NullIfWhiteSpace();
                //page.Content = Server.HtmlDecode(Request.Form[field.GetName(t => t.Content)]).NullIfWhiteSpace();
                page.MetaDescription = Request.Form[field.GetName(t => t.MetaDescription)].NullIfWhiteSpace();
                page.MetaKeywords = Request.Form[field.GetName(t => t.MetaKeywords)].NullIfWhiteSpace();

                if (!Validation.IsValid())
                {
                    return EmptyAction;
                }

                var compt = Db.GetOne<PP_Compt>(t => t.ComptKey == page.ComptKey);
                var tempAlias = StringHelper.PathJoin(
                    !Root.Langs[page.LangId].IsPrimary ? page.LangId : string.Empty,
                    Request.Form[field.GetName(t => t.PathPattern)].RootAsEmpty() + compt.PathPostfix
                );

                if (tempAlias != page.PathPattern
                && Db.Exists<PP_Page>(t => t.PathPattern == tempAlias))
                {
                    ModelState.AddFormError($"Đường dẫn [{page.PathPattern}] đã tồn tại!");
                    return EmptyAction;
                }

                page.PathPattern = tempAlias;
                page.ComptName = compt.ComptName;
                Db.Update<PP_Page>(page);
                MyRouteTable.RefreshRoutes();
                Root.ClearCache();
                return () => Response.Redirect($"{Constants.Admin_Url}/page"); ;
            }

            catch (Exception ex)
            {
                return () => ModelState.AddFormError(ex.Message);
            }
        })()();
    }

    Page.Title = Text["MODIFY A PAGE", "HIỆU CHỈNH TRANG"];
    Page.Menu = "page";

    var pageTemplates = Db
        .Query<PP_Compt>(t => t.ComptType == "page_template")
        .OrderBy(t => t.ComptKey)
        .ToDictionary(t => t.ComptKey, t => t.ComptName);

    var components = Db.GetList<PP_Compt>(t => t.ComptKey.StartsWith(page.ComptKey));
    var configs = Db.GetList<PP_Config>(t => t.LangId == LangIdCompose && t.PageId == page.Id);
    var linkOptions = Db.GetLinks(LangIdCompose);
}
<div class="modal fade" id="insertLinkModal" tabindex="-1" role="dialog"
     aria-labelledby="exampleModalScrollableTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title" id="exampleModalScrollableTitle">Modal title</h4>*@
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach (var link in linkOptions)
                {
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">@link.Item1</span>
                        </div>
                        <input type="text" class="form-control" value="@link.Item2" disabled>
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button" data-dismiss="modal" onclick="javascript:insertLink('@link.Item2')">@Text["Select link", "Chọn link"]</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách trang" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/page" aria-expanded="true" class="nav-link">
                            <i class="fas fa-list-ol"></i> @Text["List of pages", "Danh sách trang"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#edit" data-toggle="tab" aria-expanded="false" class="nav-link active">
                            <i class="fe-edit"></i> @Text["Modify a page", "Hiệu chỉnh trang"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="edit">

                        <div class="card">
                            <div class="card-header">
                                @page.Title <button type="button" class="btn btn-info float-right" data-toggle="collapse" aria-expanded="true" data-target="#main"><i class="fa fa-chevron-down pull-right"></i></button>
                            </div>
                            <div class="card-body collapse" id="main">
                                <form class="form-horizontal validable" role="form" method="post" action="?update_page" style="margin-bottom: 20px;">
                                    @AntiForgery.GetHtml()
                                    @if (ModelState.Any())
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            @Html.ValidationSummary("Thao tác không thành công!", excludeFieldErrors: false, htmlAttributes: null)
                                        </div>
                                    }
                                    <input type="hidden" name="Id" value="@page.Id" />
                                    @MyHtml.TextBoxFor(field[t => t.LangId], value: $"{page.LangId} ({Root.Langs[page.LangId].Title})", disabled: true)
                                    @MyHtml.ComboboxFor(field[t => t.ComptKey], options: pageTemplates, value: page.ComptKey, disabled: true)
                                    @MyHtml.TextBoxFor(field[t => t.Title], value: page.Title, required: true)
                                    @MyHtml.TextBoxFor(field[t => t.PathPattern], value: page.PathPattern.GetBeforeLast("/").GetAfter("/").NullIfWhiteSpace() ?? "root")
                                    @*@MyHtml.TextAreaFor(field[t => t.Content], value: page.Content)*@
                                    @MyHtml.TextBoxFor(field[t => t.MetaDescription], value: page.MetaDescription)
                                    @MyHtml.TagsInputFor(field[t => t.MetaKeywords], value: page.MetaKeywords)
                                    <hr />

                                    <div class="form-group mb-0">
                                        <div>
                                            <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                                @Text["Submit", "Xác nhận"]
                                            </button>
                                            <button type="button" class="btn btn-light waves-effect ml-1" onclick="window.history.back()">
                                                @Text["Back", "Quay lại"]
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>

                        @foreach (var compt in components)
                        {
                            if (compt.PageType == "item")
                            {
                                continue;
                            }
                            var comptSchema = Json.Decode<ObjectSchema>(compt.JsonSchema);
                            var config = configs.FirstOrDefault(t => t.ConfigKey == compt.ComptKey);
                            var comptData = config?.JsonContent != null ? Json.Decode<Dictionary<string, object>>(config.JsonContent)
                                    : Json.Decode<Dictionary<string, object>>(compt.JsonDefault);

                            bool hasConfigured = config?.JsonContent != null;
                            bool isEmptyCompt = comptSchema.SingleFieldTypes.Count == 0
                                                && comptSchema.ArrayFieldTypes.Count == 0
                                                && comptSchema.SingleObjectTypes.Count == 0
                                                && comptSchema.ArrayObjectTypes.Count == 0;

                            if (isEmptyCompt && hasConfigured)
                            {
                                continue;
                            }

                            <div class="card">
                                <div class="card-header">
                                    @Text[compt.ComptName]@(!hasConfigured?Text[" (Need config)", " (Chưa cấu hình)"] :"") <button type="button" class="btn btn-info float-right collapsed" data-toggle="collapse" data-target="#@compt.ComptKey"><i class="fa fa-chevron-down pull-right"></i></button>
                                </div>
                                <div class="card-body collapse" id="@compt.ComptKey">
                                    @if (comptData.ContainsKey("Phrases"))
                                    {
                                        var phrases = comptData["Phrases"] as IDictionary<string, object>;
                                        if (phrases != null && phrases.Count > 0 && LangIdCompose != "vi" && LangIdCompose != "en")
                                        {
                                            <div class="card">
                                                <div class="card-header">
                                                    @Text[en: "Translation", vi: "Dịch thuật"] <button type="button" class="btn btn-info float-right collapsed" data-toggle="collapse" data-target="#phrases"><i class="fa fa-chevron-down pull-right"></i></button>
                                                </div>
                                                <div class="card-body collapse" id="phrases">
                                                    @foreach (var f in phrases)
                                                    {
                                                        @MyHtml.TextBoxFor(new Field { Name = f.Key, Title = $"{Text["Translate to", "Dịch sang"]} {LangCompose.Title} <{f.Key}>" }, value: (string)f.Value)
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }

                                    @MyHtml.RenderSchema(comptSchema, compt.ComptKey, comptData)
                                    <hr />

                                    <div class="form-group mb-0">
                                        <form class="form-horizontal subform" role="form" method="post" action="?update_compt">
                                            @AntiForgery.GetHtml()
                                            <input type="hidden" name="LangId" value="@LangIdCompose" />
                                            <input type="hidden" name="Id" value="@page.Id" />
                                            <input type="hidden" name="ComptKey" value="@compt.ComptKey" />
                                            <input type="hidden" name="JsonData" />
                                            <div>
                                                <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                                    @Text[$"Update", "Cập nhật"] [@Text[compt.ComptName]]
                                                </button>
                                                <button type="button" class="btn btn-danger reset">
                                                    Reset
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section head{
    <link href="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
    <style>
        .card-header {
            background-color: #eee;
            line-height: 40px;
            font-weight: bold;
        }

        .card-template {
            display: none;
        }

        .card-header .fa {
            transition: .3s transform ease-in-out;
        }

        .card-header .collapsed .fa {
            transform: rotate(90deg);
        }
    </style>
}

@section scripts{
    <script src="@Constants.Admin_Url/ckeditor/ckeditor.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/ckfinder/ckfinder.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/speakingurl/speakingurl.min.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/stringtoslug/jquery.stringtoslug.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/parsleyjs/parsley.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <script>
        var insertLinkTarget = '';
        function create_UUID() {
            var dt = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (dt + Math.random() * 16) % 16 | 0;
                dt = Math.floor(dt / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });

            return uuid;
        }

        function getJsonData(context) {
            var jsondata = {}

            $(context).children(".card-body-singleFields").each(function () {
                $('input, select, textarea', this).each(function () {
                    if ($(this).hasAttr("myckeditor")) {
                        jsondata[this.getAttribute('originId')] = CKEDITOR.instances[$(this).attr('id')].getData();
                    } else if ($(this).hasAttr("mycheckbox")) {
                        jsondata[this.getAttribute('originId')] = $(this).is(':checked');
                    } else {
                        jsondata[this.getAttribute('originId')] = this.value.trim();
                    }
                });
            });

            $("> .card > .card-body-arrayField", context).each(function () {
                var arrayField = [];
                $('input, select, textarea', this).each(function () {
                    var value = $(this).val();
                    if (value) {
                        arrayField.push(value)
                    }
                });

                jsondata[this.getAttribute('originId')] = arrayField;
            });

            $("> .card > .card-body-singleObj", context).each(function () {
                var singleObj = getJsonData(this)
                jsondata[this.getAttribute('originId')] = singleObj;
            });

            $("> .card > .card-body-arrObjType", context).each(function () {
                var arrObj = [];

                $("> .card > .card-body-arrObjItem:not(.card-body-template)", this).each(function () {
                    var arrObjItem = getJsonData(this)
                    arrObj.push(arrObjItem);
                });

                jsondata[this.getAttribute('originId')] = arrObj;
            });

            return jsondata;
        }

        $(document).ready(function () {

            $.fn.hasAttr = function (name) {
                var attr = $(this).attr(name);
                return typeof attr !== typeof undefined && attr !== false;
            };

            $(document).on("click", ".btn-delete-arrFieldItem", function (e) {
                event.preventDefault();
                $(this).closest(".input-group").remove();
            })

            $(document).on("click", ".btn-insert-arrFieldItem", function (e) {
                var item = $(this).closest(".input-group");
                var newItem = item.clone();

                newItem.find("button")
                    .removeClass("btn-insert-arrFieldItem")
                    .addClass("btn-delete-arrFieldItem")
                    .removeClass("btn-primary")
                    .addClass("btn-danger");

                newItem.find("button > i")
                   .removeClass("fe-plus-circle")
                   .addClass("fe-x-circle");

                newItem.insertBefore(item);
                $(item).find("input").val(null);
            })

            $(document).on("click", ".btn-delete-arrObjDataItem", function (e) {
                event.preventDefault();
                $(this).closest(".card").remove();
            })

            $(document).on("click", ".btn-insert-arrObjDataItem", function (e) {
                event.preventDefault();

                var guid = create_UUID();
                var cardBody = $(this).closest(".card-body-arrObjType");
                var template = $(cardBody).children(".card-template").clone();
                template.removeClass("card-template").addClass("card");

                var btn_card_header_arrObjType = template.find(".btn-card-header-arrObjType");
                btn_card_header_arrObjType.attr("data-target", btn_card_header_arrObjType.attr("data-target") + "-" + guid)
                console.log(btn_card_header_arrObjType.attr("data-target"));

                var card_body_arrObjItem = template.find(".card-body-arrObjItem");
                card_body_arrObjItem.attr("id", card_body_arrObjItem.attr("id") + "-" + guid)
                card_body_arrObjItem.removeClass("card-body-template");
                console.log(card_body_arrObjItem.attr("id"));

                $("> div > .card-body-singleFields > div", template).each(function () {

                    var subGuid = create_UUID();

                    $(this).find('input, checkbox, select, textarea, button').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("name")) {
                            $(this).attr('name', originId + '-' + subGuid );
                        }

                        if ($(this).hasAttr("data-insertback")) {
                            $(this).attr('data-insertback', "Href" + '-' + subGuid);
                        }

                        if ($(this).hasAttr("id")) {
                            $(this).attr('id', "Href" + '-' + subGuid);
                        }
                        if ($(this).hasAttr("value")) {
                            $(this).val('')
                        }

                        if ($(this).hasAttr("name")) {
                            $(this).attr('name', originId + '-' + subGuid);
                        }
                    });

                    $(this).find('label').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("for")) {
                            $(this).attr('for', originId + '-' + subGuid);
                        }
                    });

                    $(this).find('button').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("target")) {
                            $(this).attr('target', originId + '-' + subGuid);
                        }
                    });

                    $(this).find('img').each(function () {
                        var originId = $(this).attr('originId');

                        if ($(this).hasAttr("id")) {
                            $(this).attr('id', "img-" + originId + '-' + subGuid);
                        }

                        //if($(this).hasAttr("src")) {
                        //    $(this).attr('src','/img/no-image.jpg');
                        //}
                    });
                });

                template.insertBefore($(this).parents(".button-card-body-arrObjType"));
                $(".myckeditor").each(function (index) {
				CKEDITOR.replace($(this).attr("id"), {
					toolbar: [['Source', 'Format', 'FontSize', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'Outdent', 'Indent',
				   '-', 'Bold', 'Italic', 'Underline', 'Strike',
				   '-', 'TextColor', 'BGColor', 'NumberedList', 'BulletedList',
				   '-', 'Link', 'Image', 'Table', 'RemoveFormat', 'Maximize']],
					filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
					entities_latin: false,
					htmlEncodeOutput: true,
					resize_dir: "vertical",
					width: "100%",
					padding: "0px !important"
				});
});
            });

            $(document).on("click", ".btn-move-up-arrObjDataItem", function (e) {
                event.preventDefault();

                var item = $(this).closest(".card");
                item.insertBefore(item.prev());
            });

            $(document).on("click", ".btn-move-down-arrObjDataItem", function (e) {
                event.preventDefault();

            });

            @*$('.subform').on('submit', function (event) {
                event.preventDefault();
                var card = $(this).parents(".card-body");
                var langId = $("input[name='LangId']", this).val();
                var comptKey = $("input[name='ComptKey']", this).val();
                var action = $(this).attr("action")
                var jsondata = getJsonData(card);

                $("input[name='JsonData']", this).val(JSON.stringify(jsondata, null, 0));

                //Swal.fire({
                //    title: 'Auto close alert!',
                //    html: 'I will close in <b></b> milliseconds.',
                //    onOpen: () => { Swal.showLoading();},
                //});

                $.ajax({
                    url: "@Constants.Admin_Url/config" + action,
                    type: "POST",
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    data: { __RequestVerificationToken: '@AntiForgeryTokenForAjaxPost()', LangId: langId, ComptKey: comptKey, Jsondata: JSON.stringify(jsondata, null, 0) },
                    success: function (result) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Congratulation!", "Chúc mừng!"])',
                            text: result,
                            type: "success"
                        }).then(function (t) { location.reload(); })
                    },
                    error: function (errormessage) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Oh, no!", "Thôi xong!"])',
                            text: errormessage.responseText,
                            type: "error"
                        })
                    }
                });
            });*@

            function submit_subform(form, act) {
				var card = $(form).parents(".card-body");
				var langId = $("input[name='LangId']", form).val();
				var comptKey = $("input[name='ComptKey']", form).val();
				var pageId = $("input[name='Id']", form).val();
				var action = $(form).attr("action")
                var jsondata = getJsonData(card);

				$("input[name='JsonData']", form).val(JSON.stringify(jsondata, null, 0));

                //Swal.fire({
                //    title: 'Auto close alert!',
                //    html: 'I will close in <b></b> milliseconds.',
                //    onOpen: () => { Swal.showLoading();},
                //});

                $.ajax({
    url: "@Constants.Admin_Url/page/edit" + action,
    type: "POST",
    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
    data: { __RequestVerificationToken: '@AntiForgeryTokenForAjaxPost()', LangId: langId, Id: pageId, ComptKey: comptKey, action: act, Jsondata: JSON.stringify(jsondata, null, 0) },
    success: function (result) {
        Swal.fire({
            title: '@Html.Raw(Text["Congratulation!", "Chúc mừng!"])',
            text: result,
            type: "success"
        }).then(function (t) { location.reload(); })
    },
    error: function (errormessage) {
        Swal.fire({
            title: '@Html.Raw(Text["Oh, no!", "Thôi xong!"])',
            text: errormessage.responseText,
            type: "error"
        })
    }
});
            }

			$('.subform .reset').click(function (event) {
				submit_subform($(this).closest("form"), 'reset');
			});

            $('.subform').on('submit', function (event) {
                event.preventDefault();
                submit_subform(this, 'update');
            });

            $(document).on("click", ".btn-ckfinder-popup", function (e) {
                event.preventDefault();
                var targetId = $(this).attr('target');

                window["callback_" + targetId] = function (fileUrl) {
                    var url = new URL(fileUrl);
                    $('#'+targetId).val(url.pathname);
                    $('#img-'+targetId).attr("src", url.pathname);
                }

                CKFinder.popup({
                    chooseFiles: true,
                    width: 800,
                    height: 600,
                    selectActionFunction: window["callback_" + targetId]
                });
            });

            $(".myckeditor").each(function (index) {
                CKEDITOR.replace($(this).attr("id"), {
                    toolbar: [['Source', 'Format', 'FontSize', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'Outdent', 'Indent',
                   '-', 'Bold', 'Italic', 'Underline', 'Strike',
                   '-', 'TextColor', 'BGColor', 'NumberedList', 'BulletedList',
                   '-', 'Link', 'Image', 'Table', 'RemoveFormat', 'Maximize']],
                    filebrowserBrowseUrl: "@Constants.Admin_Url/ckfinder/",
                    entities_latin: false,
                    htmlEncodeOutput: true,
                    resize_dir: "vertical",
                    width: "100%",
                    padding: "0px !important"
                });
            });

            $('#insertLinkModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                insertLinkTarget = button.data('insertback');
            })
        });

        function insertLink(link)
        {
            $('#' + insertLinkTarget).val(link);
        }
    </script>
}