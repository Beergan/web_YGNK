@using OfficeOpenXml
@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Product> field = new FieldExtractor<PP_Product>();
    private PP_Product model = new PP_Product() { NodeStatus = "CREATED", NodeType = "product" };



}


@{

    if (IsPost)
    {

        try
        {
            AntiForgery.Validate();



            Validation.RequireField("File", Text["Username cannot be empty!", "Danh mục chưa được chọn!"]);
            Validation.RequireField(field.GetName(t => t.CategoryId));
            var file = Request.Files["File"];
            var select = Request.Form["select"];
            System.Diagnostics.Debug.WriteLine($"File count in request: {Request.Files.Count}");
            Validation.Add(field.GetName(t => t.CategoryId));
            var catid = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
            if (select == "3")
            {
                if (file != null && file.ContentLength > 0)
                {
                    var filePath = Server.MapPath("~/upload/excel/" + file.FileName);

                    CheckExecl checks = new CheckExecl();


                    file.SaveAs(filePath);
                    System.Diagnostics.Debug.WriteLine($"File saved to: {filePath}");
                    ExcelPackage.LicenseContext = LicenseContext.Commercial;
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (var package = new OfficeOpenXml.ExcelPackage(new FileInfo(filePath)))
                    {
                        var worksheet = package.Workbook.Worksheets.FirstOrDefault();
                        var item = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                        var checkcat = Db.Query<PP_Product>().ToList();
                        for (int row = worksheet.Dimension.Start.Row + 1; row <= worksheet.Dimension.End.Row; row++)
                        {
                            foreach (var mota in checkcat.EmptyIfNull())
                            {
                                int lastDash = mota.NodePath.LastIndexOf('-');
                                int dotHtml = mota.NodePath.LastIndexOf('.');
                                if (lastDash != -1 && dotHtml != -1 && dotHtml > lastDash)
                                {
                                    var idcheck = mota.NodePath.Substring(lastDash + 1, dotHtml - lastDash - 1);

                                    if (idcheck == worksheet.Cells[row, 1].Text)
                                    {
                                        var newImage = worksheet.Cells[row, 2].Text;
                                        if (!string.IsNullOrWhiteSpace(mota.ImagesJson))
                                        {
                                            var existingImages = mota.ImagesJson.Split(',').Select(i => i.Trim()).ToList();

                                            if (!existingImages.Contains(newImage))
                                            {
                                                mota.ImagesJson += "," + newImage;
                                            }
                                        }
                                        else
                                        {
                                  
                                            mota.ImagesJson = newImage;
                                        }
                                        Db.Update(mota);
                                    }
                                }
                            }
                        }
                        Response.Redirect("/admin/product/index");
                    }

                    System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
                    if (page != null)
                    {
                        System.Web.UI.ScriptManager.RegisterStartupScript(page, page.GetType(), "hideLoading", "hideLoading();", true);
                    }

                }
            }
            if (select == "2")
            {
                if (catid == null)
                {
                    ModelState.AddFormError(Text["Username or password are incorrect!", "Danh mục chưa được chọn!"]);
                }
                else
                {
                    if (file != null && file.ContentLength > 0)
                    {
                        var filePath = Server.MapPath("~/upload/excel/" + file.FileName);

                        CheckExecl checks = new CheckExecl();
                        if (checks.IscheckExcel(filePath, Server.MapPath("~/upload/excel/")))
                        {

                            file.SaveAs(filePath);
                            System.Diagnostics.Debug.WriteLine($"File saved to: {filePath}");
                            ExcelPackage.LicenseContext = LicenseContext.Commercial;
                            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                            using (var package = new OfficeOpenXml.ExcelPackage(new FileInfo(filePath)))
                            {
                                var worksheet = package.Workbook.Worksheets.FirstOrDefault();
                                var item = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                                var checkcat = Db.Query<PP_Product>().Where(x => x.CategoryId == item).ToList();

                                for (int row = checkcat.Count + 1; row <= worksheet.Dimension.End.Row; row++)
                                {
                                    var text = new PP_Product();
                                    text.Title = worksheet.Cells[row, 3].Text;
                                    var Idproduct = worksheet.Cells[row, 2].Text;
                                    text.Price = worksheet.Cells[row, 4].Text.AsDecimal();
                                    text.ImageUrl = worksheet.Cells[row, 5].Text;
                                    text.CategoryId = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                                    text.LangId = "vi";
                                    text.NodeStatus = "CREATED";
                                    text.NodeType = "product";
                                    text.listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
                                    var catDetalis = new PP_Category_details();
                                    var listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
                                    int? cat = listcat.Split(',').FirstOrDefault().AsInt();
                                    HashSet<int> seenIds = new HashSet<int>();
                                    int id;
                                    foreach (var item2 in listcat.Split(','))
                                    {
                                        if (!string.IsNullOrWhiteSpace(item2) && int.TryParse(item2, out id) && !seenIds.Contains(id))
                                        {
                                            seenIds.Add(id);
                                        }
                                        else
                                        {
                                            ModelState.AddFormError("Danh mục bị trùng lặp");

                                        }
                                    }
                                    var category = Db.GetOne<PP_Category>(cat ?? 0);
                                    var page2 = Db.GetOne<PP_Page>(category.PageIdItem);

                                    var lk = new link();
                                    var tilelink = lk.GenerateNodePath(text.Title) + "-" + Idproduct;
                                    text.NodePath = string.Format(page2.PathPattern, category.CategoryPath.GetAfter("/"), tilelink.ToLower().Trim());
                                    if (Db.Exists<PP_Product>(t => t.NodePath == text.NodePath))
                                    {
                                        ModelState.AddFormError($"Đường dẫn [{text.NodePath}] đã tồn tại!");
                                        continue;
                                    }
                                    Db.Insert<PP_Product>(text);
                                    foreach (var item3 in listcat.Split(','))
                                    {

                                        if (int.TryParse(item3, out id))
                                        {
                                            var idproduct = model.Id;

                                            seenIds.Add(id);
                                            PP_Category_details catDetails = new PP_Category_details();
                                            catDetails.Idcat = id;
                                            catDetails.LangId = "vi";
                                            catDetails.PageId = model.PageId;
                                            catDetails.NodeType = "product";
                                            catDetails.PageIdItem = category.PageIdItem;
                                            catDetails.Idproduct = text.Id;
                                            Db.Insert<PP_Category_details>(catDetails);
                                        }


                                    }
                                }
                                Response.Redirect("/admin/product/index");
                            }
                        }
                        else
                        {
                            file.SaveAs(filePath);
                            System.Diagnostics.Debug.WriteLine($"File saved to: {filePath}");
                            ExcelPackage.LicenseContext = LicenseContext.Commercial;
                            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                            using (var package = new OfficeOpenXml.ExcelPackage(new FileInfo(filePath)))
                            {
                                var worksheet = package.Workbook.Worksheets.FirstOrDefault();


                                for (int row = worksheet.Dimension.Start.Row + 1; row <= worksheet.Dimension.End.Row; row++)
                                {
                                    var text = new PP_Product();
                                    text.Title = worksheet.Cells[row, 3].Text;
                                    var Idproduct = worksheet.Cells[row, 2].Text;
                                    text.Price = worksheet.Cells[row, 4].Text.AsDecimal();
                                    text.ImageUrl = worksheet.Cells[row, 5].Text;
                                    text.CategoryId = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                                    text.LangId = "vi";
                                    text.NodeStatus = "CREATED";
                                    text.NodeType = "product";
                                    text.CategoryId = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                                    text.listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
                                    var catDetalis = new PP_Category_details();
                                    var listcat = Request.Form[field.GetName(t => t.CategoryId).ToString()].NullIfWhiteSpace();
                                    int? cat = listcat.Split(',').FirstOrDefault().AsInt();


                                    HashSet<int> seenIds = new HashSet<int>();
                                    int id;

                                    foreach (var item2 in listcat.Split(','))
                                    {
                                        if (!string.IsNullOrWhiteSpace(item2) && int.TryParse(item2, out id) && !seenIds.Contains(id))
                                        {
                                            seenIds.Add(id);
                                        }
                                        else
                                        {
                                            ModelState.AddFormError("Danh mục bị trùng lặp");

                                        }
                                    }
                                    var category = Db.GetOne<PP_Category>(cat ?? 0);
                                    var page2 = Db.GetOne<PP_Page>(category.PageIdItem);
                                    var lk = new link();
                                    var tilelink = lk.GenerateNodePath(text.Title) + "-" + Idproduct;
                                    text.NodePath = string.Format(page2.PathPattern, category.CategoryPath.GetAfter("/"), tilelink.ToLower().Trim());

                                    if (Db.Exists<PP_Product>(t => t.NodePath == text.NodePath))
                                    {
                                        ModelState.AddFormError($"Đường dẫn [{text.NodePath}] đã tồn tại!");

                                        continue;
                                    }
                                    Db.Insert<PP_Product>(text);
                                    foreach (var item3 in listcat.Split(','))
                                    {

                                        if (int.TryParse(item3, out id))
                                        {
                                            var idproduct = model.Id;

                                            seenIds.Add(id);
                                            PP_Category_details catDetails = new PP_Category_details();
                                            catDetails.Idcat = id;
                                            catDetails.LangId = "vi";
                                            catDetails.PageId = model.PageId;
                                            catDetails.NodeType = "product";
                                            catDetails.PageIdItem = category.PageIdItem;
                                            catDetails.Idproduct = text.Id;
                                            Db.Insert<PP_Category_details>(catDetails);
                                        }


                                    }

                                }
                                Response.Redirect("/admin/product/index");
                            }

                        }
                        System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
                        if (page != null)
                        {
                            System.Web.UI.ScriptManager.RegisterStartupScript(page, page.GetType(), "hideLoading", "hideLoading();", true);
                        }

                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine("File is null or empty");
                    }
                }
            }
            if(select == "1")
            {
                if (file != null && file.ContentLength > 0)
                {
                    var filePath = Server.MapPath("~/upload/excel/" + file.FileName);

                    CheckExecl checks = new CheckExecl();


                    file.SaveAs(filePath);
                    System.Diagnostics.Debug.WriteLine($"File saved to: {filePath}");
                    ExcelPackage.LicenseContext = LicenseContext.Commercial;
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (var package = new OfficeOpenXml.ExcelPackage(new FileInfo(filePath)))
                    {
                        var worksheet = package.Workbook.Worksheets.FirstOrDefault();
                        var item = Request.Form[field.GetName(t => t.CategoryId)].AsInt().NullIfZero();
                        var checkcat = Db.Query<PP_Product>().ToList();
                        for (int row = worksheet.Dimension.Start.Row + 1; row <= worksheet.Dimension.End.Row; row++)
                        {
                            foreach(var mota in checkcat.EmptyIfNull() )
                            {
                                int lastDash = mota.NodePath.LastIndexOf('-');
                                int dotHtml = mota.NodePath.LastIndexOf('.');
                                if (lastDash != -1 && dotHtml != -1 && dotHtml > lastDash)
                                {
                                    var idcheck =  mota.NodePath.Substring(lastDash + 1, dotHtml - lastDash - 1);

                                    if (idcheck == worksheet.Cells[row, 1].Text)
                                    {
                                        mota.Content = worksheet.Cells[row, 2].Text;
                                        mota.Des = worksheet.Cells[row, 3].Text;
                                        Db.Update(mota);
                                    }
                                }
                            }
                        }
                        Response.Redirect("/admin/product/index");
                    }

                    System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
                    if (page != null)
                    {
                        System.Web.UI.ScriptManager.RegisterStartupScript(page, page.GetType(), "hideLoading", "hideLoading();", true);
                    }

                }
            }

        }
        catch (Exception ex)
        {
            ModelState.AddFormError(ex.Message);
        }
    }
    Page.Title = Text["CREATE A text", "THÊM SẢN PHẨM"];
    Page.Menu = "porduct";

}
<div id="loading" style="display: none;">
    <p>Loading...</p>
</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách sản phẩm" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <a href="~/upload/excel/"></a>
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/product" aria-expanded="true" class="nav-link">
                            <i class="fas fa-list-ol"></i> @Text["All of text", "Tất cả sản phẩm"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#create" data-toggle="tab" aria-expanded="false" class="nav-link active">
                            <i class="fas fa-plus-circle"></i> @Text["Create new text", "Import Excel"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="create">
                        <form class="form-horizontal validable" role="form" method="post" enctype="multipart/form-data">
                            @AntiForgery.GetHtml()
                            @if (ModelState.Any())
                            {
                                <div class="alert alert-danger" role="alert">
                                    @Html.ValidationSummary(Text["Operation failed!", "Thao tác không thành công!"], excludeFieldErrors: false, htmlAttributes: null)
                                </div>
                            }
                            @MyHtml.ComposeLanguageSwitch()
                            <div class="row">
                                <div class="col-lg-12">
                                    @MyHtml.ComboboxFor(field[t => t.CategoryId], options: GetGroupSelector("vi", "product"), value: (model.CategoryId ?? 0).ToString())
                                </div>
                                <div class="col-lg-12">
                                    <select name="select" class="form-select" aria-label="Default select example">
                                        <option selected>Chọn up</option>
                                        <option value="1">Up mô tả và chi tiết</option>
                                        <option value="2">Chi tiết sản phẩm</option>
                                        <option value="3">Danh sách hình ảnh</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-2 pt-3">
                                    <label for="formFile">  File Excel</label>
                                </div>
                                <div class="mb-3 col-lg-10">
                                    <input class="form-control" type="file" id="File" name="File" accept=".xls, .xlsx, .json">
                                </div>
                            </div>

                            @*MyHtml.ComboboxFor(field[t => t.Brand], value: model.Brand, options: brandSelections)*@

                            <hr />

                            <div class="form-group mb-0">
                                <div>
                                    <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                        @Text["Submit", "Xác nhận"]
                                    </button>
                                    <button type="button" class="btn btn-light waves-effect ml-1" onclick="window.history.back()">
                                        @Text["Back", "Quay lại"]
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section head{
}

@section scripts{
    <script src="~/assets/js/jquery.min.js"></script>
    <script src="~/assets/js/jquery.js"></script>
    <script src="~/admin/assets/js/bootstrap.bundle.min.js"></script>
    <script src="@Constants.Admin_Url/ckeditor/ckeditor.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/ckfinder/ckfinder.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/speakingurl/speakingurl.min.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/stringtoslug/jquery.stringtoslug.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/parsleyjs/parsley.min.js"></script>
    <script type="text/javascript">

    </script>
    <script>
        function showLoading() {
            // Hiển thị màn hình chờ hoặc hiệu ứng loading ở đây
            document.getElementById('loading').style.display = 'block';
        }

        function hideLoading() {
            // Ẩn màn hình chờ hoặc hiệu ứng loading ở đây
            document.getElementById('loading').style.display = 'none';
        }
    </script>
}