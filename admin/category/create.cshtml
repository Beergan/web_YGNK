@using System.Collections.Specialized
@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Category> field = new FieldExtractor<PP_Category>();
    private PP_Category model = new PP_Category();

    private Action ProcessPost()
    {
        AntiForgery.Validate();
        Validation.RequireField(field.GetName(t => t.Title), "Tiêu đề không thể để trống!");
        Validation.RequireField(field.GetName(t => t.CategoryPath), "Đường dẫn không thể để trống!");
        //Validation.Add(field.GetName(t => t.CategoryPath), Validator.Regex(@"^[a-z]+(\-[a-z0-9]+)*$"));

        model.LangId = LangIdCompose;
        model.PageId = Request.Form[field.GetName(t => t.PageId)].AsInt();
        model.PageIdItem = Request.Form[field.GetName(t => t.PageIdItem)].AsInt();
        model.ParentId = Request.Form[field.GetName(t => t.ParentId)].AsInt().NullIfZero();
        model.Title = Request.Form[field.GetName(t => t.Title)].NullIfWhiteSpace();
        model.STT = Request.Form[field.GetName(t => t.STT)].AsInt();
        model.ImageUrl = Request.Form[field.GetName(t => t.ImageUrl)].NullIfWhiteSpace();
        model.MetaDescription = Request.Form[field.GetName(t => t.MetaDescription)].NullIfWhiteSpace();
        model.MetaKeywords = Request.Form[field.GetName(t => t.MetaKeywords)].NullIfWhiteSpace();

        if (!Validation.IsValid())
        {
            ModelState.AddFormError("Dữ liệu không hợp lệ!");
            return EmptyAction;
        }

        if (model.PageId == 0)
        {
            ModelState.AddFormError("Bắt buộc phải chọn một mẫu hiển thị");
            return EmptyAction;
        }
        var page = Db.GetOne<PP_Page>(model.PageId);
        model.NodeType = page.NodeType;

        List<KeyValuePair<string, string>> breadCrumbs = null;
        PP_Category parentCategory = null;

        if (model.ParentId == null)
        {
            model.CategoryPath = string.Format(page.PathPattern.GetBeforeLast("/"), Request.Form[field.GetName(t => t.CategoryPath)].Trim());
            model.CategoryLevel = 1;
            breadCrumbs = new List<KeyValuePair<string, string>>();
        }
        else
        {
            model.CategoryPath = string.Format(page.PathPattern, Request.Form[field.GetName(t => t.CategoryPath)].Trim());
            parentCategory = Db.GetOne<PP_Category>(model.ParentId ?? 0);

            if (parentCategory == null)
            {
                ModelState.AddFormError("Chuyên mục cha không tồn tại!");
                return EmptyAction;
            }

            if (parentCategory.NodeType != model.NodeType)
            {
                ModelState.AddFormError("Các chuyên mục lồng nhau không được khác loại!");
                return EmptyAction;
            }

            model.CategoryLevel = parentCategory.CategoryLevel + 1;
            breadCrumbs = Newtonsoft.Json.JsonConvert.DeserializeObject<List<KeyValuePair<string, string>>>(parentCategory.Breadcrumb);
        }

        if (Db.Exists<PP_Category>(t => t.LangId == model.LangId
                                && t.CategoryPath == model.CategoryPath))
        {
            ModelState.AddFormError("Trùng tên với phần tử đã tồn tại!");
            return EmptyAction;
        }

        breadCrumbs.Add(new KeyValuePair<string, string>(model.CategoryPath, model.Title));
        model.Breadcrumb = Json.Encode(breadCrumbs);
        Db.Insert<PP_Category>(model);
        Root.RefreshCategoryIndexes();
        Root.ClearCache();
        return () => Response.Redirect($"{Constants.Admin_Url}/category");
    }
}
@{
    CheckAuthen()();
    if (IsPost)
    {
        try
        {
            ProcessPost().Invoke();
        }
        catch (Exception ex)
        {
            ModelState.AddFormError(ex.Message);
        }
    }

    string nodeType = Request.QueryString["type"] ?? string.Empty;
    if (!Constants.GroupTypeOptionsVI.Keys.Contains(nodeType))
    {
        nodeType = string.Empty;
    }

    Page.Title = Text["CREATE A CATEGORY", "TẠO CHUYÊN MỤC"];
    Page.Menu = nodeType.NullIfWhiteSpace() ?? "category";
    model.NodeType = nodeType;

    var query = Db.Query<PP_Page>(t => t.LangId == LangIdCompose
                               && t.PageType == "list");

    if (nodeType != string.Empty)
    {
        query = query.Where(t => t.NodeType == nodeType);
    }

    var pageSelections = query.ToDictionary(t => t.Id.ToString(), t => t.Title);

    var pageItemSelections = Db.GetList<PP_Page>(t => t.LangId == LangIdCompose && t.PageType == "item")
        .ToDictionary(t => t.Id.ToString(), t => t.Title);
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách chuyên mục" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/category" aria-expanded="true" class="nav-link">
                            <i class="fas fa-list-ol"></i> @Text["List of categories", "Các chuyên mục"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#create" data-toggle="tab" aria-expanded="false" class="nav-link active">
                            <i class="fas fa-plus-circle"></i> @Text["Create new category", "Thêm chuyên mục"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="create">
                        <form class="form-horizontal validable" role="form" method="post">

                            @AntiForgery.GetHtml()

                            @if (ModelState.Any())
                            {
                                <div class="alert alert-danger" role="alert">
                                    @Html.ValidationSummary(Text["Operation failed!", "Thao tác không thành công!"], excludeFieldErrors: false, htmlAttributes: null)
                                </div>
                            }

                            @MyHtml.ComposeLanguageSwitch()
                            @MyHtml.ComboboxFor(field[t => t.PageId], options: pageSelections, value: model.PageId.ToString())
                            @MyHtml.ComboboxFor(field[t => t.PageIdItem], options: pageItemSelections, value: model.PageIdItem.ToString())
                            @MyHtml.ComboboxFor(field[t => t.ParentId], options: GetGroupSelector(LangIdCompose), value: (model.ParentId ?? 0).ToString())
                            @MyHtml.TextBoxFor(field[t => t.Title], value: model.Title, required: true)
                            @MyHtml.TextBoxFor(field[t => t.CategoryPath], value: model.CategoryPath.GetAfterLast("/"), required: true)
                            @MyHtml.NumberBoxFor(field[t => t.STT], value: model.STT)
                            @MyHtml.TextBoxFor(field[t => t.MetaDescription], value: model.MetaDescription)
                            @MyHtml.TagsInputFor(field[t => t.MetaKeywords], value: model.MetaKeywords)
                            @MyHtml.ImagePickerFor(field[t => t.ImageUrl], value: model.ImageUrl)
                            <hr />

                            <div class="form-group mb-0">
                                <div>
                                    <button type="submit" class="btn btn-gradient waves-effect waves-light">
                                        @Text["Submit", "Xác nhận"]
                                    </button>
                                    <button type="button" class="btn btn-light waves-effect ml-1" onclick="window.history.back()">
                                        @Text["Back", "Quay lại"]
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div> <!-- end row -->
    <!-- end= row -->
</div>

@section head{
    <link href="@Constants.Admin_Url/codemirror/lib/codemirror.css" rel="stylesheet" type="text/css" />
}

@section scripts{
    <script src="@Constants.Admin_Url/assets/libs/speakingurl/speakingurl.min.js" type="text/javascript"></script>
    <script src="@Constants.Admin_Url/assets/libs/stringtoslug/jquery.stringtoslug.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/parsleyjs/parsley.min.js"></script>
    <script src="@Constants.Admin_Url/ckfinder/ckfinder.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $(document).on("click", ".btn-ckfinder-popup", function (e) {
                event.preventDefault();
                var targetId = $(this).attr('target');

                window["callback_" + targetId] = function (fileUrl) {
                    var url = new URL(fileUrl);
                    $('#'+targetId).val(url.pathname);
                    $('#img-'+targetId).attr("src", url.pathname);
                }

                CKFinder.popup({
                    chooseFiles: true,
                    width: 800,
                    height: 600,
                    selectActionFunction: window["callback_" + targetId]
                });
            });

            $("#@field.GetName(t=>t.Title)").stringToSlug({
                getPut: '#@field.GetName(t => t.CategoryPath)',
            });

            $(".validable").parsley();
        });

    </script>
}