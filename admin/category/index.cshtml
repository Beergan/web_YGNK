@inherits MyAdminPage
@functions{
    private FieldExtractor<PP_Category> field = new FieldExtractor<PP_Category>();
    private List<PP_Category> items = null;
}
@{
    CheckAuthen()();
    var urlQuery = Request.Url.Query;

    if (IsPost && urlQuery == "?delete")
    {
        new Func<Action>(() =>
        {
            try
            {
                AntiForgery.Validate();
                int itemId;
                if (!int.TryParse(Request.Form[field.GetName(t => t.Id)], out itemId))
                {
                    return AjaxResult.BadRequest();
                }

                var item = Db.GetOne<PP_Category>(itemId);
                if (item == null)
                {
                    return AjaxResult.NotFound();
                }

                if (Db.Exists<PP_Category>(t => t.ParentId == item.Id))
                {
                    return AjaxResult.Fail("Không thể xóa, vẫn còn nội dung tham chiếu đến mục này!");
                }

                if (Db.Exists<PP_Node>(t => t.CategoryId == item.Id))
                {
                    return AjaxResult.Fail("Không thể xóa, vẫn còn nội dung tham chiếu đến mục này!");
                }

                Db.Delete<PP_Category>(item.Id);
                Root.ClearCache();
                return AjaxResult.Ok(Text[$"Item [{item.Title}] has been deleted!", $"Mục [{item.Title}] đã được xóa!"]);

            }
            catch (Exception ex)
            {
                return AjaxResult.Fail(ex.Message);
            }
        })()();
    }

    string nodeType = Request.QueryString["type"] ?? string.Empty;
    if (!Constants.GroupTypeOptionsVI.Keys.Contains(nodeType))
    {
        nodeType = string.Empty;
    }

    switch (nodeType)
    {
        case "post":
            Page.Title = Text["CATEGORIES OF POSTS", "CÁC CHUYÊN MỤC BÀI VIẾT"];
            break;
        case "product":
            Page.Title = Text["CATEGORIES OF PRODUCT", "CÁC CHUYÊN MỤC SẢN PHẨM"];
            break;
        case "project":
            Page.Title = Text["CATEGORIES OF PROJECTS", "CÁC CHUYÊN MỤC DỰ ÁN"];
            break;
        default:
            Page.Title = Text["CATEGORIES", "CÁC CHUYÊN MỤC"];
            break;
    }

    Page.Menu = "category";
    var query = Db
        .Query<PP_Category>(t => t.LangId == LangIdCompose);

    if (nodeType != string.Empty)
    {
        query = query.Where(t => t.NodeType == nodeType);
    }

    items = query
        .OrderBy(t => t.Breadcrumb)
        .ToList();

    Func<string, string> makeBreadcrumb = (string s) =>  
            string.Join(" > ", Newtonsoft.Json.JsonConvert.DeserializeObject<List<KeyValuePair<string, string>>>(s).Select(b => b.Value));
}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @RenderPage($"{Constants.Admin_Url}/_share/_breadcrum.cshtml", new { CurrentBreadcrumb = "Danh sách chuyên mục" })
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card-box table-responsive">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="#list" data-toggle="tab" aria-expanded="true" class="nav-link active">
                            <i class="fe-folder"></i> @Text["Categories", "Các chuyên mục"]
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="@Constants.Admin_Url/category/create?type=@nodeType" aria-expanded="false" class="nav-link">
                            <i class="fas fa-plus-circle"></i> @Text["Create new category", "Thêm chuyên mục"]
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="list">
                        <table id="datatable" class="table table-striped table-bordered dt-responsive" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                            <thead>
                                <tr>
                                    <th style="min-width: 230px; width: 40%;">@Text[field.GetTitle(t => t.Title)]</th>
                                    <th>@Text[field.GetTitle(t => t.Breadcrumb)]</th>
                                    <th style="width:1%;min-width:80px;">@Text[field.GetTitle(t => t.NodeType)]</th>
                                    <th style="width:1%;min-width:80px;">@Text[field.GetTitle(t => t.ImageUrl)]</th>
                                    <th style="width:1%;min-width:80px;">@Text["Control", "Thao tác"]</th>
                                </tr>
                            </thead>

                            <tbody>
                                @for (int i = 0; i < items.Count; i++)
                                {
                                    <tr>

                                        <td style="min-width: 230px; width: 40%; text-transform: uppercase;">
                                            <b>@(i + 1).</b><a href="@Constants.Admin_Url/@items[i].NodeType?CategoryId=@items[i].Id">@items[i].Title</a>
                                        </td>
                                        <td>
                                            @makeBreadcrumb(items[i].Breadcrumb)
                                        </td>
                                        <td align="center">@items[i].NodeType</td>
                                        <td align="center">
                                            <a href="@Constants.Admin_Url/category/image?id=@items[i].Id">
                                                <img src="@(items[i].ImageUrl??string.Empty)" border="0" title="@items[i].Title" onerror="this.onerror=null;this.src='@Constants.Admin_Url/assets/images/not_available.png';" height="50">
                                            </a>
                                        </td>
                                        <td align="center">
                                            <div class="btn-group btn-group-sm">
                                                <a title="@Text["View", "Xem"]" target="_blank" href="/@items[i].CategoryPath" type="button" class="btn btn-warning">
                                                    <span class="fa fa-eye"></span>
                                                </a>
                                                <a title=">@Text["Modify", "Hiệu chỉnh"]" href="@Constants.Admin_Url/category/edit?id=@items[i].Id" type="button" class="btn btn-warning">
                                                    <span class="mdi mdi-pencil"></span>
                                                </a>
                                                <a title=">@Text["Delete", "Xóa"]" href="javascript:delele(@items[i].Id)" type="button" class="btn btn-danger">
                                                    <span class="mdi mdi-delete"></span>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div> <!-- end row -->
    <!-- end row -->
</div>
@section head{
    <!-- third party css -->
    <link href="@Constants.Admin_Url/assets/libs/datatables/dataTables.bootstrap4.css" rel="stylesheet" type="text/css" />
    <link href="@Constants.Admin_Url/assets/libs/datatables/buttons.bootstrap4.css" rel="stylesheet" type="text/css" />
    <link href="@Constants.Admin_Url/assets/libs/datatables/responsive.bootstrap4.css" rel="stylesheet" type="text/css" />
    <link href="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
}

@section scripts{
    <script src="@Constants.Admin_Url/assets/libs/datatables/jquery.dataTables.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/datatables/dataTables.bootstrap4.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/datatables/dataTables.responsive.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/datatables/responsive.bootstrap4.min.js"></script>
    <script src="@Constants.Admin_Url/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <script>
        function delele(id) {
            Swal.fire({
                title: '@Html.Raw(Text["Confirm to delete!","Hãy xác nhận?"])',
                text: '@Html.Raw(Text["Delete operation cannot be undone","Thao tác xóa không thể hoàn tác"])',
                type: "warning",
                showCancelButton: !0,
                confirmButtonText: '@Text["OK","Được"]',
                cancelButtonText: '@Text["Wait!","Khoan!"]',
                confirmButtonClass: "btn btn-success mt-2",
                cancelButtonClass: "btn btn-danger ml-2 mt-2",
                buttonsStyling: !1
            }).then(function(t) {
                t.value?$.ajax({
                    url: "@Constants.Admin_Url/category?delete",
                    type: "POST",
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    data: { __RequestVerificationToken: '@AntiForgeryTokenForAjaxPost()', Id: id },
                    success: function(result) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Congratulation!", "Chúc mừng!"])',
                            text: result,
                            type: "success"
                        }).then(function(t) { location.reload(); })
                    },
                    error: function(errormessage) {
                        Swal.fire({
                            title: '@Html.Raw(Text["Oh, no!", "Thôi xong!"])',
                            text: errormessage.responseText,
                            type: "error"
                        })
                    }
                }):{}
            });
        }

        $(document).ready(function() {
            jQuery.extend(jQuery.fn.dataTableExt.oSort,{
                "formatted-num-pre": function(a) {
                    a=(a==="-"||a==="")?0:a.replace(/[^\d\-\.]/g,"");
                    return parseFloat(a);
                },
                "formatted-num-asc": function(a,b) {
                    return a-b;
                },
                "formatted-num-desc": function(a,b) {
                    return b-a;
                }
            });

            $('#datatable').DataTable({
                "aaSorting": [],
                "columnDefs": [{ type: 'formatted-num',targets: 0 }],
                "pageLength": 100,
                "lengthChange": false,
            });
        });
    </script>
}