@inherits MyWebPage
@using SLK.Common
@using System.Linq
@functions {
    [Component(
        Type = ComptType.Page_Template,
        ComptName = "en:Product list template|vi:Mẫu trang danh sách sản phẩm",
        PathPostfix = "/{0}",
        PageType = "list", NodeType = "product")]
    public class ViewModel : PageListModel
    {
        public VM_Product[] Items { get; set; }
        public VM_Product[] count { get; set; }
        public VM_Product[] RecentItems { get; set; }
        public PP_Category[] cat { get; set; }
        public PP_Comment[] comnet { get; set; }

        [Field(
Title = "en:Describe|vi:Mô tả",
Required = false,
Control = InputControlType.RichTextBox)]
        public string Describe { get; set; }

        public static ViewModel Default => new ViewModel()
        {
            Title = "Danh sách blog",

        };
    }/*end_viewmodel*/
    private ViewModel _data;
    private ViewModel Data => _data ?? (_data = ViewModel.Default);
    private MyTranslator Text => new MyTranslator(Data?.Phrases);
}
@{
    string keyword = Request.QueryString[nameof(keyword)];
    string rangeInput = Request.QueryString[nameof(rangeInput)];
    var slug = ToneRemover.MakeSlug(keyword);

    int value = rangeInput.AsInt();

    _data = LoadData<ViewModel>(key: $"{LangId}-{FileName}#{NodeSlug}-{CurrentPage}", setup: (model) =>
    {



        model = model ?? new ViewModel();

        var page = Db.GetOne<PP_Page>(PageId);
        if (page == null) return null;

        var category = Db.GetOne<PP_Category>(t => t.CategoryPath == NodeSlug);
        if (category == null) return null;

        model.Breadcrumbs = Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValuePair<string, string>[]>(category.Breadcrumb);
        var arrCategory = Root.CategoryIndexes[category.Id].ToList();

        model.cat = Db.Table<PP_Category>().Where(x => x.NodeType == "product").ToArray();


        var count =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product"
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 })
.OrderByDescending(b => b.CreatedTime)
.ToArray();

        var news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product" && arrCategory.Contains(cat_blog.Idcat ?? 0)
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     BestSeller = node.BestSeller,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToArray();

        model.comnet = Db.Table<PP_Comment>().Where(x => x.Status == "SUCCESS").ToArray();
        model.count = count;

        if (rangeInput != null)
        {
            var price = rangeInput.AsInt();
            news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product" && arrCategory.Contains(cat_blog.Idcat ?? 0) && node.Price <= price
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     BestSeller = node.BestSeller,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToArray();
        }
        if (keyword != null)
        {
            news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product" && arrCategory.Contains(cat_blog.Idcat ?? 0) && node.Title.Contains(keyword)
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     BestSeller = node.BestSeller,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToArray();
        }



        var paging = news.OrderByDescending(t => t.CreatedTime)
            .Skip((this.CurrentPage - 1) * 16)
            .Take(16)
            .GroupBy(p => new { Total = news.Count() })
            .FirstOrDefault();


        model.Title = page.Title;
        model.Banner = category.ImageUrl;
        model.MetaDescription = page.MetaDescription;
        model.MetaKeywords = page.MetaKeywords;
        model.CurrentPage = this.CurrentPage;
        model.CategoryPath = category.CategoryPath;



        if (paging != null)
        {
            model.TotalPages = (long)Math.Ceiling((decimal)paging.Key.Total / 16);
            model.Items = paging.ToArray();
        }
        else
        {
            model.TotalPages = 1;
            model.Items = new VM_Product[] { };
        }

        return model;
    });

    Layout = "~/_layouts/_layout.cshtml";
    Page.Title = Data.Title;
    Page.Description = Data.MetaDescription;
    Page.Keywords = Data.MetaKeywords;
}

<div class="top_panel_title sc_layouts_row sc_layouts_row_type_normal  border-bottom">
    <div class="content_wrap">
        <div class="sc_layouts_column sc_layouts_column_align_center">
            <div class="sc_layouts_item">
                <div class="sc_layouts_title sc_align_center">
                    <div class="sc_layouts_title_title">
                        <h1 itemprop="headline" class="sc_layouts_title_caption">
                            @Data.Title
                        </h1>
                    </div>
                    <div class="sc_layouts_title_breadcrumbs"><div class="breadcrumbs"><a class="breadcrumbs_item home underline_hover" href="@Root.Config.MainMenus.FirstOrDefault().Href">@Root.Config.MainMenus.FirstOrDefault().Title</a><span class="breadcrumbs_delimiter"></span><span class="breadcrumbs_item current">@Data.Title</span></div></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="page_content_wrap">
    <div class="content_wrap">
        <div class="content">
            <a id="content_skip_link_anchor" class="globallogistics_skip_link_anchor" href="#"></a>
            <div class="posts_container classic_wrap classic_3 columns_wrap columns_padding_bottom inited_open_full_post">
                <div class="row">
                    @foreach (var item in Data.Items.EmptyIfNull())
                    {
                        <div class="col-lg-3 col-sm-4 col-12">
                            <article id="post-4179" data-post-id="4179" class="post_item post_item_container post_format_standard post_layout_classic post_layout_classic_3 post-4179 post type-post status-publish format-standard has-post-thumbnail hentry category-mua-ho category-tin-tuc category-van-chuyen-duong-bien category-van-chuyen-duong-hang-khong category-van-chuyen-hiwexpress category-van-chuyen-viet-han-1 category-van-chuyen-viet-han-2 category-van-chuyen-viet-han-3 category-van-hoa-han-quoc tag-han-viet tag-viet-han">
                                <div class="post_featured with_thumb hover_link">
                                    <img fetchpriority="high" width="890" height="628" src="@item.ImageUrl" class="attachment-globallogistics-thumb-square size-globallogistics-thumb-square wp-post-image" alt="@item.Title" title="@item.Title" decoding="async">
                                    <div class="mask"></div>
                                    <a href="@item.Path" aria-hidden="true" class="link"></a>
                                    <button class="add-to-cart-button  product-action-cart " data-product-id="@item.idnode" data-product-title="@item.Title">Thêm sản phẩm</button>
                                </div>
                                <div class="post_header entry-header">
                                    <h4 class="post_title entry-title"><a href="@item.Path" rel="bookmark">@item.Title</a></h4>
                                </div>
                            </article>
                        </div>
                    }
                </div>

            </div>
            <nav class="navigation pagination" aria-label="Phân trang bài viết">
                <h2 class="screen-reader-text">Phân trang bài viết</h2>
                <div class="nav-links">

                    @if (Data.CurrentPage > 2)
                    {
                        <a href="/@Data.CategoryPath?page=1" title="Trang đầu" class="page-numbers">
                            <i class="fa fa-angle-double-left"></i>
                        </a>
                    }

                    @if (Data.CurrentPage > 1)
                    {
                        <a href="/@Data.CategoryPath?page=@(Data.CurrentPage - 1)" class="page-numbers prev">
                            <i class="fa fa-angle-left"></i>
                        </a>
                    }

                    @if (Data.TotalPages > 0)
                    {
                        if (Data.CurrentPage > 2)
                        {
                            <a href="/@Data.CategoryPath?page=1" class="page-numbers">
                                <span class="meta-nav screen-reader-text">Page </span>1
                            </a>

                            if (Data.CurrentPage > 3)
                            {
                                <span class="page-numbers dots">…</span>
                            }
                        }

                        for (int idx = (int)Math.Max(1, Data.CurrentPage - 1); idx <= Math.Min(Data.TotalPages, Data.CurrentPage + 1); idx++)
                        {
                            if (Data.CurrentPage == idx)
                            {
                                <span aria-current="page" class="page-numbers current">
                                    <span class="meta-nav screen-reader-text">Page </span>@idx
                                </span>
                            }
                            else
                            {
                                <a class="page-numbers" href="/@Data.CategoryPath?page=@idx">
                                    <span class="meta-nav screen-reader-text">Page </span>@idx
                                </a>
                            }
                        }

                        if (Data.CurrentPage < Data.TotalPages - 1)
                        {
                            if (Data.CurrentPage < Data.TotalPages - 2)
                            {
                                <span class="page-numbers dots">…</span>
                            }

                            <a href="/@Data.CategoryPath?page=@Data.TotalPages" class="page-numbers">
                                <span class="meta-nav screen-reader-text">Page </span>@Data.TotalPages
                            </a>
                        }
                    }

                    @if (Data.CurrentPage < Data.TotalPages)
                    {
                        <a href="/@Data.CategoryPath?page=@(Data.CurrentPage + 1)" class="page-numbers next">
                            <i class="fa fa-angle-right"></i>
                        </a>
                    }

                    @if (Data.TotalPages > 2 && (Data.CurrentPage < Data.TotalPages - 1))
                    {
                        <a href="/@Data.CategoryPath?page=@(Data.TotalPages)" title="Trang cuối" class="page-numbers">
                            <i class="fa fa-angle-double-right"></i>
                        </a>
                    }

                </div>
            </nav>

        </div>
    </div>
</div>
<!-- Fruits Shop End-->
@section scripts{
    <script>
        function updatePrice(value) {
            document.getElementById('amount').value = value;
            document.getElementById('priceForm').submit();
        }
    </script>
}
