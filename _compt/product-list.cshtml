@inherits MyWebPage
@using SLK.Common
@using System.Linq
@functions {
    [Component(
        Type = ComptType.Page_Template,
        ComptName = "en:Product list template|vi:Mẫu trang danh sách sản phẩm",
        PathPostfix = "/{0}",
        PageType = "list", NodeType = "product")]
    public class ViewModel : PageListModel
    {
        public VM_Product[] Items { get; set; }
        public VM_Product[] count { get; set; }
        public VM_Product[] RecentItems { get; set; }
        public PP_Category[] cat { get; set; }
        public PP_Comment[] comnet { get; set; }

        [Field(
Title = "en:Describe|vi:Mô tả",
Required = false,
Control = InputControlType.RichTextBox)]
        public string Describe { get; set; }

        public static ViewModel Default => new ViewModel()
        {
            Title = "Danh sách blog",

        };
    }/*end_viewmodel*/
    private ViewModel _data;
    private ViewModel Data => _data ?? (_data = ViewModel.Default);
    private MyTranslator Text => new MyTranslator(Data?.Phrases);
}
@{
    string keyword = Request.QueryString[nameof(keyword)];
    string rangeInput = Request.QueryString[nameof(rangeInput)];
    var slug = ToneRemover.MakeSlug(keyword);

    int value = rangeInput.AsInt();

    _data = LoadData<ViewModel>(key: $"{LangId}-{FileName}#{NodeSlug}-{CurrentPage}", setup: (model) =>
    {



        model = model ?? new ViewModel();

        var page = Db.GetOne<PP_Page>(PageId);
        if (page == null) return null;

        var category = Db.GetOne<PP_Category>(t => t.CategoryPath == NodeSlug);
        if (category == null) return null;

        model.Breadcrumbs = Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValuePair<string, string>[]>(category.Breadcrumb);
        var arrCategory = Root.CategoryIndexes[category.Id].ToList();

        model.cat = Db.Table<PP_Category>().Where(x => x.NodeType == "product").ToArray();


        var count =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product"
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 })
.OrderByDescending(b => b.CreatedTime)
.ToArray();

        var news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product" && arrCategory.Contains(cat_blog.Idcat ?? 0)
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     BestSeller = node.BestSeller,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToArray();

        model.comnet = Db.Table<PP_Comment>().Where(x => x.Status == "SUCCESS").ToArray();
        model.count = count;

        if (rangeInput != null)
        {
            var price = rangeInput.AsInt();
            news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product" && arrCategory.Contains(cat_blog.Idcat ?? 0) && node.Price <= price
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     BestSeller = node.BestSeller,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToArray();
        }
        if (keyword != null)
        {
            news =
(from cat_blog in Db.Table<PP_Category_details>()
 join catnew in Db.Table<PP_Category>() on cat_blog.Idcat equals catnew.Id
 join node in Db.Table<PP_Product>() on cat_blog.Idproduct equals node.Id
 where node.NodeType == "product" && arrCategory.Contains(cat_blog.Idcat ?? 0) && node.Title.Contains(keyword)
 select new VM_Product
 {
     JsonContent = node.Content,
     Title = node.Title,
     Path = node.NodePath,
     Summary = node.Content,
     ImageUrl = node.ImageUrl,
     CreatedTime = node.CreatedTime,
     CategoryId = catnew.Id,
     BestSeller = node.BestSeller,
     CategoryName = catnew.Title,
     CategoryPath = catnew.CategoryPath,
     catid = catnew.Id,
     listcat = node.listcat,
     Price = node.Price,
     idnode = cat_blog.Idproduct,
     PromotionPrice = node.PromotionPrice,
     PromotionEnabled = node.PromotionEnabled,
 }).AsEnumerable()
.GroupBy(b => b.Title)
.Select(g => g.OrderByDescending(b => b.CreatedTime).First())
.OrderByDescending(b => b.CreatedTime)
.ToArray();
        }



        var paging = news.OrderByDescending(t => t.CreatedTime)
            .Skip((this.CurrentPage - 1) * 16)
            .Take(16)
            .GroupBy(p => new { Total = news.Count() })
            .FirstOrDefault();


        model.Title = page.Title;
        model.Banner = category.ImageUrl;
        model.MetaDescription = page.MetaDescription;
        model.MetaKeywords = page.MetaKeywords;
        model.CurrentPage = this.CurrentPage;
        model.CategoryPath = category.CategoryPath;



        if (paging != null)
        {
            model.TotalPages = (long)Math.Ceiling((decimal)paging.Key.Total / 16);
            model.Items = paging.ToArray();
        }
        else
        {
            model.TotalPages = 1;
            model.Items = new VM_Product[] { };
        }

        return model;
    });

    Layout = "~/_layouts/_layout.cshtml";
    Page.Title = Data.Title;
    Page.Description = Data.MetaDescription;
    Page.Keywords = Data.MetaKeywords;
}

<!-- Single Page Header start -->
<div class="container-fluid page-header py-5" style=" background: linear-gradient(rgba(248, 223, 173, 0.1), rgba(248, 223, 173, 0.1)), url(@Root.Config.BanerPost);">
    <h1 class="text-center  display-6">@Data.Title</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a href="@Root.Config.MainMenus.EmptyIfNull().First().Href">@Root.Config.MainMenus.EmptyIfNull().First().Title</a></li>

        <li class="breadcrumb-item active ">@Data.Title</li>
    </ol>
</div>
<!-- Single Page Header End -->
<!-- Fruits Shop Start-->
<div class="container-fluid fruite py-5">
    <div class="container py-5">
        <h1 class="mb-4">@Data.Title</h1>
        <div class="row g-4">
            <div class="col-lg-12">

                <div class="row g-4">
                    <div class="col-lg-3">
                        <div class="row g-4">
                            <div class="col-lg-12">
                                <form class="input-group w-100 mx-auto d-flex" action="@Root.Config.Link.PageShop" method="get">
                                    @AntiForgery.GetHtml()
                                    <input type="search" class="form-control p-3" name="keyword" placeholder="Tìm kiếm" value="@Request.QueryString["keyword"]" aria-describedby="search-icon-1">
                                    <span id="search-icon-1" class="input-group-text p-3"><i class="fa fa-search"></i></span>
                                </form>
                            </div>
                            <div class="col-lg-12">
                                <div class="mb-3 mt-3">
                                    <h4>Danh mục</h4>
                                    <ul class="list-unstyled fruite-categorie">
                                        @foreach (var item in Data.cat.EmptyIfNull().Where(x => x.CategoryLevel == 2).OrderByDescending(x => x.STT))
                                        {

                                            var category = Db.GetOne<PP_Category>(t => t.CategoryPath == item.CategoryPath);
                                            var arrCategory = Root.CategoryIndexes[category.Id].ToList();
                                            var count = Data.count
                                                .EmptyIfNull()
                                                .Count(x => arrCategory.Contains(x.catid ?? 0));

                                            <li>
                                                <div class="d-flex justify-content-between fruite-name">
                                                    <a href="@item.CategoryPath"><i class="fas fa-bars me-2"></i>@item.Title</a>
                                                    <span>(@(count))</span>
                                                </div>
                                            </li>
                                            foreach (var item3 in Data.cat.EmptyIfNull().Where(x => x.CategoryLevel == 3 && x.ParentId == item.Id))
                                            {
                                                var category2 = Db.GetOne<PP_Category>(t => t.CategoryPath == item3.CategoryPath);
                                                var arrCategory2 = Root.CategoryIndexes[category2.Id].ToList();
                                                var count2 = Data.count
                                                    .EmptyIfNull()
                                                    .Count(x => arrCategory2.Contains(x.catid ?? 0));
                                                <li>
                                                    <div class="d-flex justify-content-between fruite-name">
                                                        <a href="@item3.CategoryPath" style="padding-left:10px;"><i class="fas fa-minus-circle me-2"></i> @item3.Title</a>
                                                        <span>(@(count2))</span>
                                                    </div>
                                                </li>
                                                foreach (var item4 in Data.cat.EmptyIfNull().Where(x => x.CategoryLevel == 4 && x.ParentId == item3.Id))
                                                {
                                                    var category3 = Db.GetOne<PP_Category>(t => t.CategoryPath == item4.CategoryPath);
                                                    var arrCategory3 = Root.CategoryIndexes[category3.Id].ToList();
                                                    var count3 = Data.count
                                                        .EmptyIfNull()
                                                        .Count(x => arrCategory2.Contains(x.catid ?? 0));
                                                    <li>
                                                        <div class="d-flex justify-content-between fruite-name">
                                                            <a href="@item4.CategoryPath" style="padding-left:10px;"><i class="fas fa-minus-circle me-2"></i> @item4.Title</a>
                                                            <span>(@(count3))</span>
                                                        </div>
                                                    </li>
                                                }
                                            }

                                        }
                                    </ul>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <form class="mb-3" id="priceForm" action="@Root.Config.Link.PageShop" method="get">
                                    @AntiForgery.GetHtml()
                                    <h4 class="mb-2">Giá</h4>
                                    <input type="range" class="form-range w-100" id="rangeInput" name="rangeInput" min="0" max="@Root.Config.Price" value="@(value >0 ?value :0 )" oninput="updatePrice(this.value)">
                                    <output id="amount" name="amount" min-value="0" max-value="10000000" for="rangeInput">@(value >0 ?value :0)</output>
                                </form>
                            </div>
                            @*<div class="col-lg-12">
                                    <div class="mb-3">
                                        <h4>Additional</h4>
                                        <div class="mb-2">
                                            <input type="radio" class="me-2" id="Categories-1" name="Categories-1" value="Beverages">
                                            <label for="Categories-1"> Organic</label>
                                        </div>
                                        <div class="mb-2">
                                            <input type="radio" class="me-2" id="Categories-2" name="Categories-1" value="Beverages">
                                            <label for="Categories-2"> Fresh</label>
                                        </div>
                                        <div class="mb-2">
                                            <input type="radio" class="me-2" id="Categories-3" name="Categories-1" value="Beverages">
                                            <label for="Categories-3"> Sales</label>
                                        </div>
                                        <div class="mb-2">
                                            <input type="radio" class="me-2" id="Categories-4" name="Categories-1" value="Beverages">
                                            <label for="Categories-4"> Discount</label>
                                        </div>
                                        <div class="mb-2">
                                            <input type="radio" class="me-2" id="Categories-5" name="Categories-1" value="Beverages">
                                            <label for="Categories-5"> Expired</label>
                                        </div>
                                    </div>
                                </div>*@
                            <div class="col-lg-12">
                                <h4 class="mb-3">Sản phẩm nổi bật</h4>
                                @foreach (var item in Data.Items.EmptyIfNull().Where(x => x.BestSeller == true))
                                {
                                    <div class="d-flex align-items-center justify-content-start">
                                        <div class="rounded me-4">
                                            <a href="@item.Path"> <img src="@item.ImageUrl" class="img-fluid rounded" alt="@item.Title"></a>
                                        </div>
                                        <div>
                                            <h6 class="limited-title mb-2" title="@item.Title">@item.Title</h6>
                                            <div class="d-flex mb-2">
                                                @if (Data.comnet.Where(x => x.idproduct == @item.idnode).Count() > 0)
                                                {
                                                    var comments = Db.Table<PP_Comment>()
                                                  .Where(x => x.idproduct == @item.idnode && x.Status == "SUCCESS")
                                                  .ToArray();
                                                    int totalStars = comments.Sum(x => x.star);
                                                    int numberOfComments = comments.Length;
                                                    double averageStars = numberOfComments > 0 ? (double)totalStars / numberOfComments : 0;
                                                    int roundedAverageStars = (int)Math.Round(averageStars);
                                                    string formattedAverageStars = roundedAverageStars.ToString("F0");
                                                    <i class="fa fa-star @(roundedAverageStars >= 1 ?"text-secondary" : "")"></i>
                                                    <i class="fa fa-star @(roundedAverageStars >= 2 ?"text-secondary" : "")"></i>
                                                    <i class="fa fa-star @(roundedAverageStars >= 3 ?"text-secondary" : "")"></i>
                                                    <i class="fa fa-star @(roundedAverageStars >= 4 ?"text-secondary" : "")"></i>
                                                    <i class="fa fa-star @(roundedAverageStars >= 5 ?"text-secondary" : "")"></i>

                                                }
                                            </div>
                                            <div class="d-flex mb-2">
                                                @if (item.PromotionEnabled == true)
                                                {
                                                    <h5 class="fw-bold me-2">@item.PromotionPrice.ToString("#,##0") đ</h5>
                                                    <h5 class="text-danger text-decoration-line-through">@item.Price.ToString("#,##0") đ</h5>
                                                }
                                                else
                                                {
                                                    <h5 class="fw-bold me-2">@item.Price.ToString("#,##0") đ</h5>
                                                }

                                            </div>
                                        </div>
                                    </div>
                                }


                            </div>
                            <div class="col-lg-12">
                                <div class="position-relative">
                                    <img src="@Root.Config.BanerNew" class="img-fluid w-100 rounded" alt="">

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-9">
                        <div class="row g-4 justify-content-center">
                            @foreach (var item in Data.Items.EmptyIfNull())
                            {
                                <div class="col-md-6 col-lg-4 col-xl-3">
                                    <div class="rounded position-relative    fruite-item">
                                        <div class="fruite-img  border-bottom-0  border border-secondary">
                                            <a href="@item.Path"><img src="@item.ImageUrl" class="img-fluid w-100 rounded-top h-100 img-product-edit" alt="@item.Title" > </a>
                                        </div>
                                        
                                        <div class="p-4 border border border-secondary border-top-0 rounded-bottom">
                                            <a href="@item.Path"><h5 class="limited-title" title="@item.Title">@item.Title</h5></a>
                                            <h6 class="limited-text" style="color: #C0C0C0!important">@item.Summary</h6>
                                            <div class="d-flex justify-content-between flex-lg-wrap">
                                                <p class="text-dark fs-5 fw-bold mb-0">
                                                    @if (item.PromotionEnabled == true)
                                                    {
                                                        <h5 class="">@item.PromotionPrice.ToString("#,##0") đ</h5>
                                                    }
                                                    else
                                                    {
                                                        <h5 class="">@item.Price.ToString("#,##0") đ</h5>
                                                    }
                                                </p>
                                                <button class="btn  border border border-secondary product-action-cart rounded-pill px-3 text-primary" data-product-id="@item.idnode" data-product-title="@item.Title"><i class="fa fa-shopping-bag me-2 text-primary"></i> Thêm vào giỏ</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="col-12">
                                <div class="pagination d-flex justify-content-center mt-5">
                                    @if (Data.TotalPages > 2 && (Data.CurrentPage > 1 || Data.CurrentPage < Data.TotalPages))
                                    {
                                        <a href="/@Data.CategoryPath?page=1" class="rounded"><input style="padding:0; margin:0; border:none; background-color:transparent" type="button" value=""><i class="fas fa-angle-double-left"></i></a>
                                    }

                                    @if (Data.CurrentPage > 1)

                                    {
                                        <a href="/@Data.CategoryPath?page=@(Data.CurrentPage - 1)" class="rounded"><i class="fas fa-angle-left"></i></a>

                                    }

                                    @if (Data.TotalPages > 1)
                                    {
                                        if (Data.CurrentPage > 2)
                                        {
                                            <a href="/@Data.CategoryPath?page=1" class="rounded">1</a>
                                            if (Data.CurrentPage > 3)
                                            {
                                                <span style="font-weight: bold"><a class="rounded">...</a></span>
                                            }
                                        }

                                        for (int idx = (int)Math.Max(1, Data.CurrentPage - 1); idx <= Math.Min(Data.TotalPages, Data.CurrentPage + 1); idx++)
                                        {
                                            <a href="/@Data.CategoryPath?page=@(idx)" class="rounded @(Data.CurrentPage == idx ? "active" : "")">@idx</a>
                                        }

                                        if (Data.CurrentPage < Data.TotalPages - 1)
                                        {
                                            if (Data.CurrentPage < Data.TotalPages - 2)
                                            {
                                                <span style="font-weight: bold"><a class="rounded">...</a></span>
                                            }
                                            <a href="/@Data.CategoryPath?page=@Data.TotalPages" class="rounded">@Data.TotalPages</a>
                                        }
                                    }

                                    @if (Data.CurrentPage < Data.TotalPages)
                                    {
                                        <a href="/@Data.CategoryPath?page=@(Data.CurrentPage + 1)" class="rounded"><i class="fas fa-angle-right"></i></a>

                                    }

                                    @if (Data.TotalPages > 2 && (Data.CurrentPage < Data.TotalPages))
                                    {
                                        <a href="/@Data.CategoryPath?page=@(Data.TotalPages)" class="rounded" title="Trang cuối"><input style="padding:0; margin:0; border:none; background-color:transparent" type="button" value=""> <i class="fas fa-angle-double-right"></i></a>
                                    }

                                    @*<a href="#" class="active rounded">1</a>
                                        <a href="#" class="rounded">2</a>
                                        <a href="#" class="rounded">3</a>
                                        <a href="#" class="rounded">4</a>
                                        <a href="#" class="rounded">5</a>
                                        <a href="#" class="rounded">6</a>*@

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Fruits Shop End-->
@section scripts{
    <script>
        function updatePrice(value) {
            document.getElementById('amount').value = value;
            document.getElementById('priceForm').submit();
        }
    </script>
}
