@using SLK.Common
@inherits MyWebPage
@functions {
    [Component(
        Type = ComptType.Page_Template,
        ComptName = "en:Page cart template|vi:Mẫu trang thanh toán")]
    public class ViewModel
    {
        public IDictionary<string, string> Phrases { get; set; } = new Dictionary<string, string>();

        public string Title { get; set; }

        public string MetaDescription { get; set; }

        public string MetaKeywords { get; set; }


        public class text
        {
            [Field(
Title = "Tiêu đề",
Required = false,
Control = InputControlType.TextBox)]
            public string Title { get; set; }
            [Field(
        Title = "Nội dung",
        Required = false,
        Control = InputControlType.TextBox)]
            public string Content { get; set; }

        }
        [Field(
Title = "Text")
]
        public text[] Text { get; set; }



        public static ViewModel Default => new ViewModel()
        {
            Title = "Giới thiệu",
        };
    }/*end_viewmodel*/
    private ViewModel _data;
    private ViewModel Data => _data ?? (_data = ViewModel.Default);
    private MyTranslator Text => new MyTranslator(Data?.Phrases);
    private FieldExtractor<PP_Order> field = new FieldExtractor<PP_Order>();
}
@{ this.Server.ClearError();
    this.Response.TrySkipIisCustomErrors = true;
    var query = Request.Url.Query;
    var cart = new ShoppingCart(this.Context);
    var cartLines = cart.GetCartLines();
    _data = LoadData<ViewModel>(key: $"{LangId}-{FileName}#{NodeSlug}", setup: (model) =>
    {
        model = model ?? new ViewModel();

        var page = Db.GetOne<PP_Page>(PageId);

        if (page == null)
        {
            return model;
        }

        model.Title = page.Title;
        model.MetaDescription = page.MetaDescription;
        model.MetaKeywords = page.MetaKeywords;

        return model;
    });
    if (query == "?order")
    {

        try
        {


            Validation.RequireField(field.GetName(t => t.Name));
            Validation.RequireField(field.GetName(t => t.Phone));
            Validation.RequireField(field.GetName(t => t.DeliveryAddress));
            if (!Validation.IsValid())
            {
                ModelState.AddFormError($"Vui Lòng nhập đủ thông tin!");
                Response.Redirect(NodeSlug);
                ModelState.AddFormError($"Vui Lòng nhập đủ thông tin!");
            }

            string PayMethod = Request.Form[field.GetName(t => t.PayMethod)].NullIfWhiteSpace();
            string Name = Request.Form[field.GetName(t => t.Name)].NullIfWhiteSpace();
            string Phone = Request.Form[field.GetName(t => t.Phone)].NullIfWhiteSpace();
            string Email = Request.Form[field.GetName(t => t.Email)].NullIfWhiteSpace();
            string Address = Request.Form[field.GetName(t => t.DeliveryAddress)].NullIfWhiteSpace();
            string Province = Request.Form[field.GetName(t => t.Province)].NullIfWhiteSpace();
            string District = Request.Form[field.GetName(t => t.District)].NullIfWhiteSpace();
            string Ward = Request.Form[field.GetName(t => t.Ward)].NullIfWhiteSpace();
            string Note = Request.Form[field.GetName(t => t.Note)].NullIfWhiteSpace();
            int TotalAmount = Request.Form[field.GetName(t => t.TotalAmount)].AsInt();
            string check = Request.Form["radio-stacked"].NullIfWhiteSpace();


            Validation.RequireField(nameof(Phone));
            Validation.RequireField(nameof(Email));
            Validation.RequireField(nameof(Name));
            Validation.RequireField(nameof(Address));
            Validation.RequireField(nameof(Province));
            Validation.RequireField(nameof(Ward));



            //var q = new REQ_ORDER_FEE
            //{
            //    pick_province = Root.Config.PickAddress.Province,
            //    pick_district = Root.Config.PickAddress.District,
            //    pick_ward = Root.Config.PickAddress.Ward,
            //    pick_address = Root.Config.PickAddress.Address,
            //    province = Province,
            //    district = District,
            //    ward = Ward,
            //    weight = cart.GetTotalWeight(),
            //    value = cart.GetSubTotal(),
            //    transport = "road ",
            //    deliver_option = "none",
            //};

            //RSP_ORDER_FEE rsp = null;
            //if (!GHTK_ADAPTER.CaculateFee(q, (result) => { rsp = result; }, (error) => { }))
            //{
            //    return AjaxResult.Fail("Đã có lỗi xảy ra!");
            //}
            //cart.ShipFee = rsp.fee.fee;
            //string ip = HttpContext.Current.Request.Params["HTTP_CLIENT_IP"] ?? HttpContext.Current.Request.UserHostAddress;

            if (cartLines.Count() <= 0)
            {
                ModelState.AddFormError($"Vui Lòng chọn sản phẩm trước khi đặt hàng!");
                Response.Redirect(NodeSlug);
            }

            var order = new PP_Order()
            {
                OrderCode = $"{DateTime.Now:yyMMddHHmmss}{Root.ShortId()}",
                OrderStatus = "NEW",
                SubTotalAmount = cart.GetSubTotal(),
                TotalAmount = cart.GetTotal(),
                TotalWeight = cart.GetTotalWeight(),
                ShipFee = cart.ShipFee,
                PayMethod = check,
                Name = Name,
                Phone = Phone,
                Email = Email,
                DeliveryAddress = Address,
                Province = Province,
                District = District,
                Ward = Ward,
                Note = Note,
                JsonData = Json.Encode(cart.GetOrderLines())
            };

            decimal pricesum = cart.GetTotal();
            SendMail sm = new SendMail();
            string body = @"
<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Xác nhận thông tin</title>
<style>
body {
font-family: Arial, sans-serif;
margin: 0;
padding: 0;
background-color: #f2f2f2;
}
.container {
width: 60%;
margin: 20px auto;
background-color: #fff;
border-radius: 8px;
box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
padding: 20px;
}
h1 {
color: black;
}
.info {
margin-bottom: 20px;
}
.info p {
margin: 5px 0;
}
.info strong {
font-weight: bold;
}
.center-image {
display: block;
margin: 0 auto; /* Căn giữa hình ảnh */
}
</style>
</head>
<body>

<div class=""container"">
<h1>Xác nhận thông tin</h1>
<div class=""info"">
<p><strong>Nội dung:</strong> Thông tin khách hàng</p>
<p><strong>Họ tên:</strong> " + Name + @"</p>
<p><strong>Số điện thoại:</strong> " + Phone + @"</p>
<p><strong>Email:</strong> " + Email + @"</p>
<p><strong>Địa chỉ:</strong> " + Address + @"</p>
<p><strong>Tỉnh:</strong> " + Province + @"</p>
<p><strong>Thành phố:</strong> " + Ward + @"</p>
<p><strong>Tổng tiền:</strong> " + pricesum + @"</p>
</div>

</div>

</body>
</html>";
            string results = await sm.Send_MailAsync("Khách hàng liên hệ", body, Root.Config.Company.Email);
            Db.Insert<PP_Order>(order);
            HttpContext.Current.Session["makeOrder"] = true;
            cart.Clear();
            HttpContext.Current.Session["numbermakeOrder"] = order.OrderCode;
            decimal ShipFee;
            Session.Remove(nameof(ShipFee));
            Response.Redirect("/dat-hang-thanh-cong");
            AjaxResult.Ok(Json.Encode(new { Message = $"Đặt hàng thành công! Mã đơn hàng {order.OrderCode}", Url = string.Format(Root.Config.Link.PageInfoOrder, order.OrderCode) }));
        }
        catch (Exception ex)
        {
            ModelState.AddFormError(ex.Message);
        }
    };

    Layout = $"~/_layouts/_layout.cshtml";
    Page.Title = Data.Title;
    Page.Description = Data.MetaDescription;
    Page.Keywords = Data.MetaKeywords;

}
@section head {
    <style>
        @@media(min-width:768px) {
            .w-sm50 {
                width: 50% !important
            }
        }

        @@media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px) {
            /* Force table to not be like tables anymore */
            table, thead, tbody, th, td, tr {
                display: block;
            }
                /* Hide table headers (but not display: none;, for accessibility) */
                thead tr {
                    position: absolute;
                    top: -9999px;
                    left: -9999px;
                }

            tr {
                border: 1px solid #ccc;
            }

            td {
                /* Behave  like a "row" */
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%;
            }

                td:before {
                    /* Now like a table header */
                    position: absolute;
                    /* Top/left values mimic padding */
                    top: 6px;
                    left: 6px;
                    width: 45%;
                    padding-right: 10px;
                    white-space: nowrap;
                }
                /*
        Label the data
        */


                td:nth-of-type(1):before {
                    content: "Tên";
                }

                td:nth-of-type(2):before {
                    content: "Đơn giá";
                }

                td:nth-of-type(3):before {
                    content: "Số lượng";
                }

                td:nth-of-type(4):before {
                    content: "Tổng";
                }

                td:nth-of-type(5):before {
                    content: "Xử lý";
                }
        }
    </style>
}
<div class="container-fluid page-header py-5" style=" background: linear-gradient(rgba(248, 223, 173, 0.1), rgba(248, 223, 173, 0.1)), url(@Root.Config.BanerPost);">
    <h1 class="text-center  display-6">Đặt hàng</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a href="@Root.Config.MainMenus.EmptyIfNull().First().Href">@Root.Config.MainMenus.EmptyIfNull().First().Title</a></li>
        <li class="breadcrumb-item"><a href="">Đặt hàng</a></li>
    </ol>
</div>
<div class="container-fluid py-5">
    <div class="container py-5">
        <h1 class="mb-4">Thông tin giỏ hàng</h1>
        <div class="row">
            <div class="col-lg-7">
                <div class="col-lg-12 p-lg-4 p-1">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col">Sản phẩm</th>
                                    <th scope="col">Tên</th>
                                    <th scope="col">Đơn giá</th>
                                    <th scope="col">Số lượng</th>
                                    <th scope="col">Tổng</th>
                                    <th scope="col">Xử lý</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in cart.GetCartLines())
                                {
                                    <tr class="cart-item">
                                        <th scope="row">
                                            <div class="d-flex align-items-center">
                                                <img src="@item.Product.ImageUrl" class="img-fluid me-5 rounded-circle" style="width: 80px; height: 80px;" alt="">
                                            </div>
                                        </th>
                                        <td class="w-sm50">
                                            <p class="mb-0 mt-4">@item.Product.Title</p>
                                        </td>
                                        <td>
                                            <p class="mb-0 mt-4">@($"{item.Price:C0}")</p>
                                        </td>
                                        <td class="cart-item">
                                            <div class="input-group cart-plus-minus quantity mt-4" data-product-id="@item.Product.Id" style="width: 100px;">
                                                <div class="input-group-btn">
                                                    <button class="btn cart-plus-minus btn-sm btn-minus rounded-circle bg-light border dec">
                                                        <i class="fa fa-minus"></i>
                                                    </button>
                                                </div>
                                                <input type="text" name="quantity" value="@item.Quantity" class="form-control quantity form-control-sm text-center border-0">
                                                <div class="input-group-btn">
                                                    <button class="btn cart-plus-minus btn-sm btn-plus rounded-circle bg-light border dec">
                                                        <i class="fa fa-plus"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="">
                                            <div class="mb-0 mt-4 rowtotal">
                                                @if (item.Product.PromotionEnabled == true && item.Product.PromotionPrice > 0)
                                                {
                                                    @($"{item.Product.PromotionPrice * item.Quantity:C0}")
                                                }
                                                else
                                                {
                                                    @($"{item.Product.Price * item.Quantity:C0}")
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <button data-product-id="@item.Product.Id" data-product-variation="@item.Variation" class="btn btn-md rounded-circle inject-me bg-light border mt-4">
                                                <i class="fa fa-times text-danger"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-12 col-lg-12 p-lg-4 p-1 col-xl-12 ">
                    <div class="table-responsive">
                        <div class="row m-0 p-0">
                            <div class="col-lg-12">
                                <div class="d-flex justify-content-between">
                                    <h5>Tổng tiền:</h5>
                                    <h5 class=" price-sum">@($"{cart.GetTotal():C0}")</h5>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row g-4 text-center align-items-center justify-content-center border-bottom py-3">
                        @foreach (var item in Data.Text.EmptyIfNull())
                        {
                            <div class="col-12 p-lg-4 p-1">
                                <div class="form-check text-start my-3">
                                    <p type="checkbox" class="form-check-input bg-primary border-0" id="Transfer-1" name="Transfer" value="Transfer"></p>
                                    <label class="form-check-label" for="Transfer-1">@item.Title</label>
                                </div>
                                <p class="text-start text-dark">@item.Content</p>
                            </div>
                        }
                    </div>

                </div>
            </div>
            <div class="col-lg-5">
                
                <form action="@NodeSlug?order" method="post">
                    @AntiForgery.GetHtml()
                    @Html.ValidationSummary("", excludeFieldErrors: false, htmlAttributes: null)
                    <div class="row ">
                        <div class="col-lg-12">
                            <h3 style="color:red">Hình thức thanh toán</h3>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-check position-relative">
                                <input type="radio" class="form-check-input" value="COD" style=" position: absolute; top: 38%; transform: translateY(-50%);" id="Check2" name="radio-stacked" required>
                                <label class="form-check-label check-form-out" for="validationFormCheck2">COD</label>
                            </div>
                            <div class="form-check mb-3 position-relative">
                                <input type="radio" class="form-check-input" value="Chuyển khoản" style=" position: absolute; top: 38%; transform: translateY(-50%);" id="Check3" name="radio-stacked" required>
                                <label class="form-check-label check-form-out" for="validationFormCheck3">CHUYỂN KHOẢN</label>
                                <div class="invalid-feedback">Vùi lòng chọn 1 trong 2 phương thức</div>
                            </div>
                        </div>
                        <div class="col-md-12 col-lg-12 col-xl-12 ">
                            <div class="row">
                                <div class="col-lg-12">
                                    <h3 style="color:red">Thông tin thanh toán</h3>
                                </div>
                                <div class="col-md-12 col-lg-12">
                                    <div class="form-item w-100">
                                        <label class="form-label my-3">Họ và tên<sup>*</sup></label>
                                        <input type="text" id="name" name="@field.GetName(x=>x.Name)" class="form-control" required>
                                    </div>
                                </div>
                            </div>
                            @*<div class="form-item">
                        <label class="form-label my-3">Company Name<sup>*</sup></label>
                        <input type="text" class="form-control">
                    </div>*@
                            <div class="form-item">
                                <label class="form-label my-3">Địa chỉ <sup>*</sup></label>
                                <textarea type="text" id="Address" name="@field.GetName(x=>x.DeliveryAddress)" class="form-control" rows="2" placeholder="Số nhà, tên đường, phường" required> </textarea>
                            </div>
                            @*<div class="form-item">
                        <label class="form-label my-3">Country<sup>*</sup></label>
                        <input type="text" class="form-control">
                    </div>*@
                            @*<div class="form-item">
                        <label class="form-label my-3">Postcode/Zip<sup>*</sup></label>
                        <input type="text" class="form-control">
                    </div>*@
                            <div class="form-item">
                                <label class="form-label my-3">Số điện thoại<sup>*</sup></label>
                                <input type="tel" name="@field.GetName(x=>x.Phone)" class="form-control" required>
                            </div>
                            @*<div class="form-check my-3">
                        <input type="checkbox" class="form-check-input" id="Account-1" name="Accounts" value="Accounts">
                        <label class="form-check-label" for="Account-1">Create an account?</label>
                    </div>
                    <hr>
                    <div class="form-check my-3">
                        <input class="form-check-input" type="checkbox" id="Address-1" name="Address" value="Address">
                        <label class="form-check-label" for="Address-1">Ship to a different address?</label>
                    </div>*@
                            <div class="form-item my-3">
                                <textarea name="@field.GetName(x=>x.Note)" id="Note" class="form-control" spellcheck="false" cols="30" rows="5" placeholder="Ghi chú"></textarea>
                            </div>
                            <div class="form-item d-flex justify-content-between ">
                                <a href="/"><button class="btn border-secondary rounded-pill px-4 py-3 text-primary text-uppercase mb-4" type="button">Tiếp tục mua hàng</button></a>


                                <button class="btn border-secondary rounded-pill px-4 py-3 text-primary text-uppercase mb-4 ms-4" type="submit"> Đặt hàng </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
       
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {

                $(document).on('click', '.dec', function () {
                    var cart_item = $(this).parents(".cart-item");
                    var div_rowtotal = $(this).parents(".cart-item").find(".rowtotal");

                var productId = $(this).parents(".cart-plus-minus").attr("data-product-id");
                var variation = $(this).parents(".cart-plus-minus").attr("data-product-variation");
                    var quantity = $(cart_item).find("input[name='quantity']").val();

                $.post("@Root.Config.Link.PageCart?dec", { __RequestVerificationToken: "@AntiForgeryTokenForAjaxPost()", "productId": productId, "variation": variation, "quantity": quantity }, function (data) {
                    var response = jQuery.parseJSON(data);
                    if (quantity == 0)
                        $(cart_item).remove();
                    else
                        $(div_rowtotal).html(response.RowTotal);
					$(".sidebar-cart-active").html(response.CartSidebar);
                    $('#cart-count').text(response.CartCount);
                    $(".cart-count1").load(window.location.href + " .cart-count1");
                    $(".cart-count2").load(window.location.href + " .cart-count2");
                    $(".price-sum").load(window.location.href + " .price-sum");
                    $.toast({
                        heading: 'Thông báo',
                        text: 'Giỏ hàng đã được cập nhật!',
                        position: 'bottom-center',
                        stack: false
                    })
                }).fail(function () {
                    $.toast({
                        heading: 'ERROR',
                        text: 'Đã có lỗi xảy ra!',
                        position: 'bottom-center',
                        stack: false,
                        afterHidden: function () {
                            location.reload();
                        }
                    });
                });

            });

      $(document).on('click', '.inc', function () {
    var cart_item = $(this).closest(".cart-item");
    var div_rowtotal = $(cart_item).find(".rowtotal");
    var productId = $(cart_item).find(".cart-plus-minus").attr("data-product-id");
    var variation = $(cart_item).find(".cart-plus-minus").attr("data-product-variation");
    var quantity = $(cart_item).find("input[name='quantity']").val();

    $.post("@Root.Config.Link.PageCart?inc", {
        __RequestVerificationToken: "@AntiForgeryTokenForAjaxPost()",
        "productId": productId,
        "variation": variation,
        "quantity": quantity
    }, function (data) {
        var response = jQuery.parseJSON(data);
        $(".table").load(window.location.href + " .table");
        $(".cart-count1").load(window.location.href + " .cart-count1");
        $(".cart-count2").load(window.location.href + " .cart-count2");
        $(".price-sum").load(window.location.href + " .price-sum");
       /* $(".sidebar-cart-active").html(response.CartSidebar);*/
/*        $('#cart-count').text(response.CartCount);*/
        $.toast({
            heading: 'Thông báo',
            text: 'Giỏ hàng đã được cập nhật!',
            position: 'bottom-center',
            stack: false
        });


    }).fail(function () {
        $.toast({
            heading: 'ERROR',
            text: 'Đã có lỗi xảy ra!',
            position: 'bottom-center',
            stack: false,
            afterHidden: function () {
                location.reload();
            }
        });
    });
});


            $(document).on('click', '.inject-me', function () {
                var cart_item = $(this).parents(".cart-item");
                var productId = $(this).attr("data-product-id");
                var variation = $(this).attr("data-product-variation");
                $.post("@Root.Config.Link.PageCart?remove", { __RequestVerificationToken: "@AntiForgeryTokenForAjaxPost()", "productId": productId, "variation": variation }, function (data) {
					$(cart_item).remove();
                    /*  $('#cart-count').text(response.CartCount);*/
                    $(".cart-count1").load(window.location.href + " .cart-count1");
                    $(".cart-count2").load(window.location.href + " .cart-count2");
                    $(".price-sum").load(window.location.href + " .price-sum");
                    $.toast({
                        heading: 'Thông báo',
                        text: 'Giỏ hàng đã được cập nhật!',
                        position: 'bottom-center',
                        stack: false
                    })
                }).fail(function () {
                    $.toast({
                        heading: 'ERROR',
                        text: 'Đã có lỗi xảy ra!',
                        position: 'bottom-center',
                        stack: false,
                        afterHidden: function () {
                            location.reload();
                        }
                    });
                });
            });

        });
    </script>

}