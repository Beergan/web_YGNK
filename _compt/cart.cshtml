@using SLK.Common
@inherits MyWebPage
@functions {
    [Component(
        Type = ComptType.Page_Template,
        ComptName = "en:Page cart template|vi:Mẫu trang giỏ hàng")]
    public class ViewModel
    {
        public IDictionary<string, string> Phrases { get; set; } = new Dictionary<string, string>();

        public string Title { get; set; }

        public string MetaDescription { get; set; }

        public string MetaKeywords { get; set; }


        [Field(
   Title = "en:Content|vi:Nội dung",
   Required = false,
   Control = InputControlType.RichTextBox)]
        public string Content { get; set; }


        public static ViewModel Default => new ViewModel()
        {
            Title = "Giới thiệu",
        };
    }/*end_viewmodel*/
    private ViewModel _data;
    private ViewModel Data => _data ?? (_data = ViewModel.Default);
    private MyTranslator Text => new MyTranslator(Data?.Phrases);
}

@{
    _data = LoadData<ViewModel>(key: $"{LangId}-{FileName}#{NodeSlug}", setup: (model) =>
    {
        model = model ?? new ViewModel();

        var page = Db.GetOne<PP_Page>(PageId);

        if (page == null)
        {
            return model;
        }

        model.Title = page.Title;
        model.MetaDescription = page.MetaDescription;
        model.MetaKeywords = page.MetaKeywords;

        return model;
    });

    this.Server.ClearError();
    this.Response.TrySkipIisCustomErrors = true;
    var cart = new ShoppingCart(this.Context);
    var query = Request.Url.Query;

    if (IsPost && query == "?inc")
    {
        AntiForgery.Validate();
        int productId = Request.Form[nameof(productId)].AsInt();
        string variation = Request.Form[nameof(variation)].NullIfWhiteSpace();
        var product = Db.GetOne<PP_Product>(productId);
        var cartLinesquaty = cart.GetCartLines();
        var line = cartLinesquaty.Where(l => l.Product.Id == product.Id && l.Variation == variation).FirstOrDefault();
        int quantity = line.Quantity + 1;


        if (product == null)
        {
            Response.StatusCode = 404;
            Response.End();
        }

        if (product.AttrbEnabled && variation == null)
        {
            Response.StatusCode = 500;
            Response.End();
        }

        cart.Update(product, variation, quantity);
        Response.Write(Json.Encode(new { RowTotal = $"{cart.GetProductTotal(product):C0}", CartSidebar = RenderPage("layout_sidebar.cshtml").ToHtmlString() }));
        Response.End();
    }
    else if (IsPost && query == "?dec")
    {
        AntiForgery.Validate();
        int productId = Request.Form[nameof(productId)].AsInt();
        int quantity = Request.Form[nameof(quantity)].AsInt();
        string variation = Request.Form[nameof(variation)].NullIfWhiteSpace();
        var product = Db.GetOne<PP_Product>(productId);
        var cartLinesquaty = cart.GetCartLines();




        if (product == null)
        {
            Response.StatusCode = 404;
            Response.End();
        }

        if (product.AttrbEnabled && variation == null)
        {
            Response.StatusCode = 500;
            Response.End();
        }

        cart.Update(product, variation, quantity);
        Response.Write(Json.Encode(new { RowTotal = $"{cart.GetProductTotal(product):C0}", CartSidebar = RenderPage("layout_sidebar.cshtml").ToHtmlString() }));
        Response.End();
    }
    if (IsPost && query == "?add")
    {
        AntiForgery.Validate();
        int productId = Request.Form[nameof(productId)].AsInt();
        string variation = Request.Form[nameof(variation)].NullIfWhiteSpace();
        int quantity = Request.Form[nameof(quantity)].AsInt();
        var product = Db.GetOne<PP_Product>(productId);

        if (product == null)
        {
            Response.StatusCode = 404;
            Response.End();
        }

        if (product.AttrbEnabled && variation == null)
        {
            Response.StatusCode = 500;
            Response.End();
        }

        cart.AddToCart(product, variation, quantity);
        Response.Write(RenderPage("layout_sidebar.cshtml").ToHtmlString());
        Response.End();
    }
    else if (IsPost && query == "?remove")
    {
        AntiForgery.Validate();
        int productId = Request.Form[nameof(productId)].AsInt();
        string variation = Request.Form[nameof(variation)].NullIfWhiteSpace();

        var product = Db.GetOne<PP_Product>(productId);
        if (product == null)
        {
            Response.StatusCode = 404;
            Response.End();
        }

        if (product.AttrbEnabled && variation == null)
        {
            Response.StatusCode = 500;
            Response.End();
        }

        cart.RemoveFromCart(product, variation);
        Response.End();
        Response.Write($"{cart.GetTotal():C0}");

    }




    Layout = $"~/_layouts/_layout.cshtml";
    Page.Title = Data.Title;
    Page.Description = Data.MetaDescription;
    Page.Keywords = Data.MetaKeywords;
    var cartLines = cart.GetCartLines();
}

@section head {
    <style>
        @@media(min-width:768px){
            .w-sm50{
                width:50%!important
            }
        }
        @@media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px) {
            /* Force table to not be like tables anymore */
            table, thead, tbody, th, td, tr {
                display: block;
            }
                /* Hide table headers (but not display: none;, for accessibility) */
                thead tr {
                    position: absolute;
                    top: -9999px;
                    left: -9999px;
                }

            tr {
                border: 1px solid #ccc;
            }

            td {
                /* Behave  like a "row" */
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%;
            }

                td:before {
                    /* Now like a table header */
                    position: absolute;
                    /* Top/left values mimic padding */
                    top: 6px;
                    left: 6px;
                    width: 45%;
                    padding-right: 10px;
                    white-space: nowrap;
                }
                /*
        Label the data
        */


                td:nth-of-type(1):before {
                    content: "Tên";
                }

                td:nth-of-type(2):before {
                    content: "Đơn giá";
                }

                td:nth-of-type(3):before {
                    content: "Số lượng";
                }

                td:nth-of-type(4):before {
                    content: "Tổng";
                }

                td:nth-of-type(5):before {
                    content: "Xử lý";
                }
        }
    </style>
}
<!-- Single Page Header start -->
<div class="container-fluid page-header py-5" style=" background: linear-gradient(rgba(248, 223, 173, 0.1), rgba(248, 223, 173, 0.1)), url(@Root.Config.BanerPost);">
    <h1 class="text-center display-6">Giỏ hàng</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a href="@Root.Config.MainMenus.EmptyIfNull().First().Href">@Root.Config.MainMenus.EmptyIfNull().First().Title</a></li>
        <li class="breadcrumb-item active ">Giỏ hàng</li>
    </ol>
</div>
<!-- Single Page Header End -->
<!-- Cart Page Start -->
<div class="container-fluid py-5">
    <div class="container py-5">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Sản phẩm</th>
                        <th scope="col">Tên</th>
                        <th scope="col">Đơn giá</th>
                        <th scope="col">Số lượng</th>
                        <th scope="col">Tổng</th>
                        <th scope="col">Xử lý</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in cart.GetCartLines())
                    {
                        <tr class="cart-item">
                            <th scope="row">
                                <div class="d-flex align-items-center">
                                    <img src="@item.Product.ImageUrl" class="img-fluid me-5 rounded-circle" style="width: 80px; height: 80px;" alt="">
                                </div>
                            </th>
                            <td class="w-sm50">
                                <p class="mb-0 mt-4">@item.Product.Title</p>
                            </td>
                            <td>
                                <p class="mb-0 mt-4">@($"{item.Price:C0}")</p>
                            </td>
                            <td class="cart-item">
                                <div class="input-group cart-plus-minus quantity mt-4" data-product-id="@item.Product.Id" style="width: 100px;">
                                    <div class="input-group-btn">
                                        <button class="btn cart-plus-minus btn-sm btn-minus rounded-circle bg-light border dec">
                                            <i class="fa fa-minus"></i>
                                        </button>
                                    </div>
                                    <input type="text" name="quantity" value="@item.Quantity" class="form-control quantity form-control-sm text-center border-0">
                                    <div class="input-group-btn">
                                        <button class="btn cart-plus-minus btn-sm btn-plus rounded-circle bg-light border dec">
                                            <i class="fa fa-plus"></i>
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td class="">
                                <div class="mb-0 mt-4 rowtotal">
                                    @if (item.Product.PromotionEnabled == true && item.Product.PromotionPrice > 0)
                                    {
                                        @($"{item.Product.PromotionPrice * item.Quantity:C0}")
                                    }
                                    else
                                    {
                                        @($"{item.Product.Price * item.Quantity:C0}")
                                    }
                                </div>
                            </td>
                            <td>
                                <button data-product-id="@item.Product.Id" data-product-variation="@item.Variation" class="btn btn-md rounded-circle inject-me bg-light border mt-4">
                                    <i class="fa fa-times text-danger"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @*<div class="mt-5">
                <input type="text" class="border-0 border-bottom rounded me-5 py-3 mb-4" placeholder="Coupon Code">
                <button class="btn border-secondary rounded-pill px-4 py-3 text-primary" type="button">Apply Coupon</button>
            </div>*@
        <div class="row g-4 justify-content-end">
            <div class="col-8"></div>
            <div class="col-sm-8 col-md-7 col-lg-6 col-xl-4">
                <div class="">
                    @*<div class="p-4">
                            <h1 class="display-6 mb-4">Cart <span class="fw-normal">Total</span></h1>
                            <div class="d-flex justify-content-between mb-4">
                                <h5 class="mb-0 me-4">Tổng tiền:</h5>
                                <p class="mb-0">$96.00</p>
                            </div>

                            <p class="mb-0 text-end">Shipping to Ukraine.</p>
                        </div>
                        <div class="py-4 mb-4 border-top border-bottom d-flex justify-content-between">
                            <h5 class="mb-0 ps-4 me-4">Total</h5>
                            <p class="mb-0 pe-4">$99.00</p>
                        </div>*@
                    <div class="d-flex">
                        <a href="/"><button class="btn border-secondary rounded-pill px-4 py-3 text-primary text-uppercase mb-4 ms-4" type="button">Tiếp tục mua hàng</button></a>
                        <a href="@Root.Config.Link.PageMakeOrder"> <button class="btn border-secondary rounded-pill px-4 py-3 text-primary text-uppercase mb-4 ms-4" type="button"> Đặt hàng </button></a>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>




@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {

                $(document).on('click', '.dec', function () {
                    var cart_item = $(this).parents(".cart-item");
                    var div_rowtotal = $(this).parents(".cart-item").find(".rowtotal");

                var productId = $(this).parents(".cart-plus-minus").attr("data-product-id");
                var variation = $(this).parents(".cart-plus-minus").attr("data-product-variation");
                    var quantity = $(cart_item).find("input[name='quantity']").val();

                $.post("@NodeSlug?dec", { __RequestVerificationToken: "@AntiForgeryTokenForAjaxPost()", "productId": productId, "variation": variation, "quantity": quantity }, function (data) {
                    var response = jQuery.parseJSON(data);
                    if (quantity == 0)
                        $(cart_item).remove();
                    else
                        $(div_rowtotal).html(response.RowTotal);
					$(".sidebar-cart-active").html(response.CartSidebar);
                    $('#cart-count').text(response.CartCount);
                    $(".cart-count1").load(window.location.href + " .cart-count1");
                    $(".cart-count2").load(window.location.href + " .cart-count2");
                    $.toast({
                        heading: 'Thông báo',
                        text: 'Giỏ hàng đã được cập nhật!',
                        position: 'bottom-center',
                        stack: false
                    })
                }).fail(function () {
                    $.toast({
                        heading: 'ERROR',
                        text: 'Đã có lỗi xảy ra!',
                        position: 'bottom-center',
                        stack: false,
                        afterHidden: function () {
                            location.reload();
                        }
                    });
                });

            });

      $(document).on('click', '.inc', function () {
    var cart_item = $(this).closest(".cart-item");
    var div_rowtotal = $(cart_item).find(".rowtotal");
    var productId = $(cart_item).find(".cart-plus-minus").attr("data-product-id");
    var variation = $(cart_item).find(".cart-plus-minus").attr("data-product-variation");
    var quantity = $(cart_item).find("input[name='quantity']").val();

    $.post("@NodeSlug?inc", {
        __RequestVerificationToken: "@AntiForgeryTokenForAjaxPost()",
        "productId": productId,
        "variation": variation,
        "quantity": quantity
    }, function (data) {
        var response = jQuery.parseJSON(data);
        $(".table").load(window.location.href + " .table");
        $(".cart-count1").load(window.location.href + " .cart-count1");
        $(".cart-count2").load(window.location.href + " .cart-count2");

       /* $(".sidebar-cart-active").html(response.CartSidebar);*/
/*        $('#cart-count').text(response.CartCount);*/
        $.toast({
            heading: 'Thông báo',
            text: 'Giỏ hàng đã được cập nhật!',
            position: 'bottom-center',
            stack: false
        });


    }).fail(function () {
        $.toast({
            heading: 'ERROR',
            text: 'Đã có lỗi xảy ra!',
            position: 'bottom-center',
            stack: false,
            afterHidden: function () {
                location.reload();
            }
        });
    });
});


            $(document).on('click', '.inject-me', function () {
                var cart_item = $(this).parents(".cart-item");
                var productId = $(this).attr("data-product-id");
                var variation = $(this).attr("data-product-variation");
                $.post("@NodeSlug?remove", { __RequestVerificationToken: "@AntiForgeryTokenForAjaxPost()", "productId": productId, "variation": variation }, function (data) {
					$(cart_item).remove();
                    /*  $('#cart-count').text(response.CartCount);*/
                    $(".cart-count1").load(window.location.href + " .cart-count1");
                    $(".cart-count2").load(window.location.href + " .cart-count2");
                    $.toast({
                        heading: 'Thông báo',
                        text: 'Giỏ hàng đã được cập nhật!',
                        position: 'bottom-center',
                        stack: false
                    })
                }).fail(function () {
                    $.toast({
                        heading: 'ERROR',
                        text: 'Đã có lỗi xảy ra!',
                        position: 'bottom-center',
                        stack: false,
                        afterHidden: function () {
                            location.reload();
                        }
                    });
                });
            });

        });
    </script>

}